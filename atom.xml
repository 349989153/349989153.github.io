<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陆扬的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-17T08:15:04.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>349989153</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据可视化的探索和思考</title>
    <link href="http://yoursite.com/2018/04/17/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%8E%A2%E7%B4%A2%E5%92%8C%E6%80%9D%E8%80%83-1/"/>
    <id>http://yoursite.com/2018/04/17/数据可视化的探索和思考-1/</id>
    <published>2018-04-17T06:17:30.000Z</published>
    <updated>2018-04-17T08:15:04.272Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司在做的项目，需要给一个传统企业做数据分析，而分析结果则以app的形式进行展示。做起来感觉千头万绪焦头烂额，才发现之前觉得简单的可视化，其实没有这么简单。</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>传统企业一般有相当多的报表，好一点的是用excel存着，附以大量的数据和公式；差一点的则全是纸质了。需要对它进行数据分析，已经是一个大问题：</p><p><strong>如何从令人头晕的密密麻麻的数据中，提炼出重要的逻辑，使得数据可视化的展示，既简单直白，有种“故事”的感觉，又准确可靠，还能够符合用户的需求。</strong></p><p>如果不是在网页上，而是在app上展示，那么又需要加上一个新问题：</p><p><strong>如何在app有限的屏幕面积上，展示那么多的数据。在看数据的时候，用户往往会有更深入了解的需求，那么如何表达这种层级的关系。</strong></p><hr><p>一个个问题来，首先第一个问题。</p><p>我认为，要能讲故事，首先你得了解讲故事需要用到的语法。而各种数据图表的类型，以及它们适用的场合，就是这样的一个“语法”。</p><p>所以我们先了解一下各种数据图表的类型。</p><h2 id="折线图（Line）："><a href="#折线图（Line）：" class="headerlink" title="折线图（Line）："></a><strong>折线图（Line）：</strong></h2><p><img src="basic_line.png" alt=""></p><p>折线图可以表示趋势，或者某个量（y轴）跟随另一个量（x轴）的变化情况。一般表示趋势的居多，这时候x轴的值其实和y轴无关。</p><p>2条或以上的折线，一般表达2个或多个的趋势比较，这个比较当然是逻辑上有联系的，比较才有意义，不能关公比秦琼。<strong>2条以上折线的典型例子是控制变量法做实验的AB测试。</strong></p><p>折线和y轴以及x轴连接，形成一个闭合的面积，就变成了堆栈折线图，<strong>堆栈折线图代表了积分，也就是积分有意义的情况下，可以这么使用。</strong>比如速度的积分是路程。</p><p>多个堆栈折线图，就可以看出积分结果的高低了，有点变形的饼图的意思。</p><p>总结：我感觉折线图的重点是这条线本身，其次是与其他线的比较（对比条形图）。折线图给人比较大概的感觉，看整体趋势，细节却不够清晰。</p><h2 id="条形图（Bar）："><a href="#条形图（Bar）：" class="headerlink" title="条形图（Bar）："></a>条形图（Bar）：</h2><p><img src="basic_bar.png" alt=""></p><p>条形图感觉是变化最多的图表种类，它既可以和折线图互换，表达类似的数据，也可以和折线图共存（因为都有x轴和y轴）。</p><p>条形图更关心的是个体，这里个体指的是x轴上的一小段区划。如果一段区划上有多个条，比如上面的图，那么表示某一年，4个个体的数量的比较。如果一段区划上只有一条，那么可以和折线图互换的，虽然数据相同，但是两者表达的感觉还是不同的。折线图倾向于整体趋势，条形图倾向于细节。</p><p><img src="stack_bar.png" alt="堆叠条形图"></p><p>堆叠条形图适用于一个条由多个数据组成，这样它既可以表示一个条的数量，又可以表示一个条内，部分与整体的关系。一个条，可以转化为一个饼图。</p><h2 id="饼图（Pie）："><a href="#饼图（Pie）：" class="headerlink" title="饼图（Pie）："></a>饼图（Pie）：</h2><p><img src="basic_pie.png" alt="饼图"></p><p>饼图的意义就相对单一一些啦，表达部分与整体的关系，特别是部分占整体多少份额。</p><h2 id="散点图（Scatter）："><a href="#散点图（Scatter）：" class="headerlink" title="散点图（Scatter）："></a>散点图（Scatter）：</h2><p><img src="basic_scatter.png" alt="散点图"></p><p>散点图表达的是大量的离散的数据，并且通过观察这些离散的数据，得到一个统计结果。散点图和统计学联系非常紧密，可以说统计上面的概念和公式都可以应用到散点图上。</p><p>这样说也许不准确，其实是先有的散点，然后再有的统计，同时有的散点图。</p><h2 id="雷达图（Radar）："><a href="#雷达图（Radar）：" class="headerlink" title="雷达图（Radar）："></a>雷达图（Radar）：</h2><p><img src="basic_radar.png" alt="雷达图"></p><p>雷达图我见得最多的地方是游戏里，表达一个球员或武将的能力值。雷达延伸越远，表示能力越强；雷达图形越圆润，表示各项能力比较平均；雷达图形越尖锐，表示有长处有短处。</p><p>所以雷达图，表示对某个对象的评价、评分。</p><p>未完还会待续。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司在做的项目，需要给一个传统企业做数据分析，而分析结果则以app的形式进行展示。做起来感觉千头万绪焦头烂额，才发现之前觉得简单的可视化，其实没有这么简单。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>native-echarts的问题汇总</title>
    <link href="http://yoursite.com/2018/04/16/native-echarts%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2018/04/16/native-echarts的问题汇总/</id>
    <published>2018-04-16T05:39:17.000Z</published>
    <updated>2018-04-17T06:12:56.967Z</updated>
    
    <content type="html"><![CDATA[<p>公司最近用react-native来开发一个app。在app里需要显示图表，我们选择了native-echarts这个库。这个库实际上是封装了一个webview，在webview里对echarts代码进行调用。应该说这个库坑还是不少的，在这里记录一下。</p><a id="more"></a><hr><h1 id="库的简介："><a href="#库的简介：" class="headerlink" title="库的简介："></a>库的简介：</h1><p>npm：<a href="https://www.npmjs.com/package/native-echarts" target="_blank" rel="noopener">https://www.npmjs.com/package/native-echarts</a></p><p>github：<a href="https://github.com/somonus/react-native-echarts" target="_blank" rel="noopener">https://github.com/somonus/react-native-echarts</a></p><h1 id="换行的问题"><a href="#换行的问题" class="headerlink" title="换行的问题"></a>换行的问题</h1><p>这个问题是我进行调查并且发现的，所以可能会说得多一些。</p><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>在echarts的option中，需要显示各种文字，legend，label，tooltips等等。为了适应大家对文字样式的需求，echarts提供了一个formatter给大家做一些文字的变换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">formatter:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val.split(<span class="string">""</span>).join(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在<code>native-echarts</code>这个库中，写了上面的<code>formatter</code>，<code>\n</code>换行并不能生效。其他的替代方法（详见该库github上的issue，搜索”\n”）如<code>\\n</code>，<code>\\nn</code>也都没有用。</p><h2 id="调查："><a href="#调查：" class="headerlink" title="调查："></a>调查：</h2><p>后面发现，问题出在<code>native-echarts/src/util/toString.js</code>里（请看注释）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`~--demo--~<span class="subst">$&#123;val&#125;</span>~--demo--~`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        result = result.replace(<span class="string">'\"~--demo--~'</span>, <span class="string">''</span>).replace(<span class="string">'~--demo--~\"'</span>, <span class="string">''</span>).replace(<span class="regexp">/\\n/g</span>, <span class="string">''</span>).replace(<span class="regexp">/\\\"/g</span>,<span class="string">"\""</span>);</span><br><span class="line"><span class="comment">//while循环体内，多次执行了replace(/\\n/g, ''),导致无论你写多少个\\nn，都会被替换掉</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (result.indexOf(<span class="string">'~--demo--~'</span>) &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案是在循环体之外，替换一次<code>replace(/\\n/g, &#39;&#39;).replace(/\\\&quot;/g,&quot;\&quot;&quot;);</code></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1.用下面的代码替换<code>native-echarts/src/util/toString.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`~--demo--~<span class="subst">$&#123;val&#125;</span>~--demo--~`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    result = result.replace(<span class="string">'\"~--demo--~'</span>, <span class="string">''</span>).replace(<span class="string">'~--demo--~\"'</span>, <span class="string">''</span>);</span><br><span class="line">  &#125; <span class="keyword">while</span> (result.indexOf(<span class="string">'~--demo--~'</span>) &gt;= <span class="number">0</span>);</span><br><span class="line">  result = result.replace(<span class="regexp">/\\n/g</span>, <span class="string">''</span>).replace(<span class="regexp">/\\\"/g</span>,<span class="string">"\""</span>);<span class="comment">//最后一个replace将release模式中莫名生成的\"转换成"</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.formatter写成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> maxLength = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">if</span> (name.length &gt; maxLength) &#123;</span><br><span class="line">          <span class="keyword">return</span> name.slice(<span class="number">0</span>, maxLength) + <span class="string">'\nn'</span> + name.slice(maxLength);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><code>\nn</code>的地方就可以加入一个换行符了。</p><h1 id="安卓打包后不显示图表"><a href="#安卓打包后不显示图表" class="headerlink" title="安卓打包后不显示图表"></a>安卓打包后不显示图表</h1><h2 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h2><p>安卓上打包安装到真机后，图表显示不出来，ios则没问题。</p><h2 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>将<code>native-echarts/src/components/Echarts/index.js</code>中的代码：<code>source={require(&#39;./tpl.html&#39;)}</code>修改为：<br><code>source= {Platform.OS === &#39;ios&#39; ? require(&#39;./tpl.html&#39;) : { uri: &#39;file:///android_asset/tpl.html&#39; }}</code></li></ul><ul><li>同时将tpl.html文件拷贝到安卓项目下面的app/src/main/assets文件夹中。</li></ul><p>参考：<a href="https://segmentfault.com/a/1190000011856689" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011856689</a></p><h1 id="在某些安卓手机上闪烁的问题"><a href="#在某些安卓手机上闪烁的问题" class="headerlink" title="在某些安卓手机上闪烁的问题"></a>在某些安卓手机上闪烁的问题</h1><h2 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h2><p>在某些手机上发现，图表区域会一黑一白的闪烁。典型机型如：oppo R7c和oppo R8，安卓系统版本都是4.4</p><h2 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h2><p><a href="https://www.jianshu.com/p/6fa9482695bf" target="_blank" rel="noopener">https://www.jianshu.com/p/6fa9482695bf</a></p><h2 id="研究："><a href="#研究：" class="headerlink" title="研究："></a>研究：</h2><p>为了弄明白这个问题的原理，我仔细对照了修改的部分和原本的代码，感觉比较有关系的是<code>renderChart.js</code>的改写。因为它区分了第一次渲染和后续渲染，如果不是第一次的话，就不调用<code>echarts.init</code>方法。于是缩小了修改的范围，<code>renderChart.js</code>还按照文章里的改，<code>node_modules/native-echarts/src/components/Echarts/index.js</code>改成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView, View, StyleSheet, Platform &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> renderChart <span class="keyword">from</span> <span class="string">'./renderChart'</span>;</span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'./echarts.min'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;</span><br><span class="line">    nextProps = nextProps || &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(thisProps[key]) != <span class="built_in">JSON</span>.stringify(nextProps[key])) &#123;</span><br><span class="line"><span class="comment">// console.log('props', key, thisProps[key], nextProps[key])</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nextProps.option !== <span class="keyword">this</span>.props.option) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决数据改变时页面闪烁的问题</span></span><br><span class="line">      <span class="keyword">this</span>.refs.chart.injectJavaScript(renderChart(nextProps, <span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">height</span>: <span class="keyword">this</span>.props.height || <span class="number">400</span>,&#125;&#125;&gt;</span><br><span class="line">        &lt;WebView</span><br><span class="line">          ref=<span class="string">"chart"</span></span><br><span class="line">          scrollEnabled = &#123;<span class="literal">false</span>&#125;</span><br><span class="line">          injectedJavaScript = &#123;renderChart(<span class="keyword">this</span>.props, <span class="literal">true</span>)&#125;</span><br><span class="line">          style=&#123;&#123;</span><br><span class="line">            height: <span class="keyword">this</span>.props.height || <span class="number">400</span>,</span><br><span class="line">            backgroundColor: <span class="keyword">this</span>.props.backgroundColor || <span class="string">'transparent'</span></span><br><span class="line">          &#125;&#125;</span><br><span class="line">          scalesPageToFit=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          source= &#123;Platform.OS === <span class="string">'ios'</span> ? <span class="built_in">require</span>(<span class="string">'./tpl.html'</span>) : &#123; <span class="attr">uri</span>: <span class="string">'file:///android_asset/tpl.html'</span> &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>装到oppo R7上之后问题依旧。</p><p>非常的奇怪啊。这就说明，其实问题不是出在renderChart.js里面，推翻了我之前的设想，设想被推翻是很气人的，我必须得弄明白哪里出问题了。运用控制变量法，打了几个对照实验的包，分别是：</p><ol><li>新的renderChart + 旧的index.js + 部分新的index.js</li><li>新的renderChart + 新的index.js</li></ol><p>1无效，2有效，说明问题不是renderChart，也不是index.js里面的<code>componentWillReceiveProps</code>和<code>shouldComponentUpdate</code>。那其他的修改就只剩<code>render</code>方法里面了。仔细观察了render方法里面异同，发现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">height</span>: <span class="keyword">this</span>.props.height || <span class="number">400</span>,&#125;&#125;&gt;</span><br><span class="line">  &lt;WebView</span><br><span class="line">    ref=<span class="string">"chart"</span></span><br><span class="line">    scrollEnabled = &#123;<span class="literal">false</span>&#125;</span><br><span class="line">    injectedJavaScript = &#123;renderChart(<span class="keyword">this</span>.props)&#125;</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      height: <span class="keyword">this</span>.props.height || <span class="number">400</span>,</span><br><span class="line">      backgroundColor: <span class="keyword">this</span>.props.backgroundColor || <span class="string">'transparent'</span><span class="comment">// 这是唯一的区别</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    source= &#123;Platform.OS === <span class="string">'ios'</span> ? <span class="built_in">require</span>(<span class="string">'./tpl.html'</span>) : &#123; <span class="attr">uri</span>: <span class="string">'file:///android_asset/tpl.html'</span> &#125;&#125;</span><br><span class="line">    onMessage=&#123;event =&gt; <span class="keyword">this</span>.props.onPress ? <span class="keyword">this</span>.props.onPress(<span class="built_in">JSON</span>.parse(event.nativeEvent.data)) : <span class="literal">null</span>&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/View&gt;</span></span><br></pre></td></tr></table></figure><p>唯一的区别是backgroundColor，于是用旧的renderChart + 旧的index.js + 去掉backgroundColor，发现问题解决了。</p><p>但最后，为了干掉重复echarts.init可能造成的问题，我还是按照下述进行了修改：</p><p><code>renderChart.js</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'./echarts.min'</span>;</span><br><span class="line"><span class="keyword">import</span> toString <span class="keyword">from</span> <span class="string">'../../util/toString'</span>;</span><br><span class="line"><span class="keyword">var</span> myChart = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">renderChart</span>(<span class="params">props,isFirst</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const height = props.height || 400;</span></span><br><span class="line">  <span class="keyword">const</span> height = <span class="string">`<span class="subst">$&#123;props.height || <span class="number">400</span>&#125;</span>px`</span>;</span><br><span class="line">  <span class="keyword">const</span> width = props.width ? <span class="string">`<span class="subst">$&#123;props.width&#125;</span>px`</span> : <span class="string">'auto'</span>;</span><br><span class="line">  <span class="keyword">if</span> (isFirst)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    document.getElementById('main').style.height = "<span class="subst">$&#123;height&#125;</span>";</span></span><br><span class="line"><span class="string">    document.getElementById('main').style.width = "<span class="subst">$&#123;width&#125;</span>";</span></span><br><span class="line"><span class="string">    myChart = echarts.init(document.getElementById('main'));</span></span><br><span class="line"><span class="string">    myChart.setOption(<span class="subst">$&#123;toString(props.option)&#125;</span>);</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    document.getElementById('main').style.height = "<span class="subst">$&#123;height&#125;</span>";</span></span><br><span class="line"><span class="string">    document.getElementById('main').style.width = "<span class="subst">$&#123;width&#125;</span>";</span></span><br><span class="line"><span class="string">    myChart.setOption(<span class="subst">$&#123;toString(props.option)&#125;</span>);</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WebView, View, StyleSheet, Platform &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> renderChart <span class="keyword">from</span> <span class="string">'./renderChart'</span>;</span><br><span class="line"><span class="keyword">import</span> renderChartNoFirst <span class="keyword">from</span> <span class="string">'./renderChart'</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'./echarts.min'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="comment">// 预防过渡渲染</span></span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;</span><br><span class="line">    nextProps = nextProps || &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(thisProps[key]) != <span class="built_in">JSON</span>.stringify(nextProps[key])) &#123;</span><br><span class="line"><span class="comment">// console.log('props', key, thisProps[key], nextProps[key])</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nextProps.option !== <span class="keyword">this</span>.props.option) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决数据改变时页面闪烁的问题</span></span><br><span class="line">      <span class="keyword">this</span>.refs.chart.injectJavaScript(renderChart(nextProps,<span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (Platform.OS == <span class="string">'android'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">height</span>: <span class="keyword">this</span>.props.height || <span class="number">400</span>,&#125;&#125;&gt;</span><br><span class="line">          &lt;WebView</span><br><span class="line">            ref=<span class="string">"chart"</span></span><br><span class="line">            scrollEnabled = &#123;<span class="literal">false</span>&#125;</span><br><span class="line">            injectedJavaScript = &#123;renderChart(<span class="keyword">this</span>.props,<span class="literal">true</span>)&#125;</span><br><span class="line">            style=&#123;&#123;</span><br><span class="line">              height: <span class="keyword">this</span>.props.height || <span class="number">400</span>,</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            <span class="comment">//source=&#123;require('./tpl.html')&#125;</span></span><br><span class="line">            source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'file:///android_asset/tpl.html'</span>&#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;else&#123;</span></span><br><span class="line"><span class="regexp">      return (</span></span><br><span class="line"><span class="regexp">        &lt;View style=&#123;&#123;flex: 1, height: this.props.height || 400,&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;WebView</span></span><br><span class="line"><span class="regexp">            ref="chart"</span></span><br><span class="line"><span class="regexp">            scrollEnabled = &#123;false&#125;</span></span><br><span class="line"><span class="regexp">            scalesPageToFit=&#123;false&#125;</span></span><br><span class="line"><span class="regexp">            injectedJavaScript = &#123;renderChart(this.props,true)&#125;</span></span><br><span class="line"><span class="regexp">            style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">              height: this.props.height || 400,</span></span><br><span class="line"><span class="regexp">            &#125;&#125;</span></span><br><span class="line"><span class="regexp">            source= &#123;Platform.OS === 'ios' ? require('./</span>tpl.html<span class="string">') : &#123; uri: '</span>file:<span class="comment">///android_asset/tpl.html' &#125;&#125;</span></span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司最近用react-native来开发一个app。在app里需要显示图表，我们选择了native-echarts这个库。这个库实际上是封装了一个webview，在webview里对echarts代码进行调用。应该说这个库坑还是不少的，在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="问题集" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>《js函数式编程》第3章</title>
    <link href="http://yoursite.com/2018/04/12/%E3%80%8Ajs%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%AC3%E7%AB%A0/"/>
    <id>http://yoursite.com/2018/04/12/《js函数式编程》第3章/</id>
    <published>2018-04-12T05:56:01.000Z</published>
    <updated>2018-04-17T03:45:34.408Z</updated>
    
    <content type="html"><![CDATA[<p>阅读第三章。</p><a id="more"></a><hr><h1 id="变量的作用域和闭包"><a href="#变量的作用域和闭包" class="headerlink" title="变量的作用域和闭包"></a>变量的作用域和闭包</h1><h2 id="什么叫作用域"><a href="#什么叫作用域" class="headerlink" title="什么叫作用域"></a>什么叫作用域</h2><p>《js权威指南》：变量的作用域是指能够获取和操作某个变量的范围。</p><p>《js高级程序设计》：首先是执行环境的概念，或者叫执行上下文。（上下文根据sicp的描述，就是存放函数名和函数名对应的操作、变量名和变量名对应的值的地方。有了上下文，程序才知道“+”是什么操作，“nums”这个变量有什么值）。而作用域不仅仅是作用域，它叫作用域链，是每个执行环境都有的。通过作用域链，可以访问相对“全局”的变量。</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><h3 id="怎样拥有全局作用域"><a href="#怎样拥有全局作用域" class="headerlink" title="怎样拥有全局作用域"></a>怎样拥有全局作用域</h3><p>在全局环境定义变量和函数，或定义变量时不加前置var。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>在任意作用域里都可以访问，并修改。</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>词法作用域就是静态作用域，<strong>实际上表达的是当各个作用域有同名变量时，解析这个名字到底会取到哪个值。</strong></p><p>《js函数式编程》：一个变量的可见性。（这个说法很难懂）</p><p>《js权威指南》：全局变量会被局部变量遮盖（“遮盖”会把全局变量改掉吗，这个说法不是很好。）</p><p>《js高级程序设计》:还是作用域链，在解析标识符的时候，沿着作用域链一级级解析，解析到了，就不再往前了。（这是最好的解释。）</p><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>作者写的东西一开始完全看不懂，上网搜到了：<a href="https://github.com/mqyqingfeng/Blog/issues/3，才得到一点启发：" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/3，才得到一点启发：</a></p><blockquote><p>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</p><p>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p><p>让我们认真看个例子就能明白之间的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; var value = 1;</span><br><span class="line">&gt;</span><br><span class="line">&gt; function foo() &#123;</span><br><span class="line">&gt;     console.log(value);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; function bar() &#123;</span><br><span class="line">&gt;     var value = 2;</span><br><span class="line">&gt;     foo();</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; bar();</span><br><span class="line">&gt;</span><br><span class="line">&gt; // 结果是 ???</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p><p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p><p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p><p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p><p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p></blockquote><p>静态作用域和动态作用域的<strong>相同点在于：大家解析标识符的时候，都是用“作用域链”这个概念，逐级往上解析来弄的，这没区别。</strong></p><p><strong>不同点在于：这个“作用域链”，是什么时候定好的呢？</strong></p><p>静态：一个函数定义的时候就定好了。所以看起来，这个函数的作用域链基本是不会变的。</p><p>动态：一个函数调用的时候才定好。如果这个函数被其他函数调用了，那么作用域链上要加入其他函数的作用域。</p><p>所以动态作用域是什么意思，到这里应该就清楚了。</p><p>至于作者写的那一票代码，是他对于“动态作用域”理解和实现的模拟。好像是比较高深的样子，暂时不理解也没关系。不过知乎上有个答案倒是给了一点启发：</p><blockquote><p>动态作用域就是整个程序运行的时候只有一个env。<br>什么是env呢？env就是一组binding。<br>binding是什么呢？binding就是从identifer到value的映射。<br>dynamic scope在每次函数求值的时候都会在这唯一的一个env里查询或更新。<br>而static scope是每次函数求值的时候都创建一个新的env，包含了函数定义时候的所能访问到的各种binding。这个新的env连同那个函数一起，俗称闭包Closure。</p><p>作者：韦冠楠链接：<a href="https://www.zhihu.com/question/20032419/answer/49183240来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.zhihu.com/question/20032419/answer/49183240来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p></blockquote><p>理解了吧，动态作用域就是一个很“穷”的实现，整个语言里只有一个地方（env）来放key和value的绑定，就好像以前穷得全家只有一条裤子，谁出去谁穿。那么姐姐穿出去的时候，口袋里放了3个铜板，等到弟弟穿出去的时候，再放1个铜板，那裤子里就有4个铜板了，谁让所有人都共享一条裤子呢。</p><h3 id="所以为什么聊函数式的时候我们还要聊动态作用域呢？"><a href="#所以为什么聊函数式的时候我们还要聊动态作用域呢？" class="headerlink" title="所以为什么聊函数式的时候我们还要聊动态作用域呢？"></a>所以为什么聊函数式的时候我们还要聊动态作用域呢？</h3><h2 id="javascript的动态作用域"><a href="#javascript的动态作用域" class="headerlink" title="javascript的动态作用域"></a>javascript的动态作用域</h2><p>javascript是静态作用域的，但是js也有动态作用域的入口，这就是this，以及function的call和apply方法。</p><p>它俩能动态地改变this的值。不过还好这种改变是“人为”的，并且所有人都知道call和apply的效果，所以大家心里都有潜台词：“不确定它会变成什么样，最好别碰”.</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>真的读不下去了，这个翻译读得头都烂了。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包和一等函数是唇齿相依的关系。</p><p>什么是闭包？</p><p>《js高级程序设计》：闭包是一个函数（function），在这个函数里使用了其他函数作用域里的变量。</p><p>《js函数式编程》：闭包是一个函数（function），这个函数直接使用了某些变量，而不是通过参数传入，这些变量的定义和这个函数的定义是在同一个作用域内。</p><p>按照《js函数式编程》的说法，使用全局变量的，在全局作用域内定义的，也叫闭包。</p><h3 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h3><p>自由变量和闭包有关联，这个关联是， 在闭包创建的时候，自由变量会被关进去。在函数里定义的变量，能被这个函数里定义的函数们获取到。这就是自由变量。</p><p>靠，作者自己举的代码例子和自己的解释背道而驰，然后代码例子也和大多数人的理解背道而驰，弃坑弃坑。读不完了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读第三章。&lt;/p&gt;
    
    </summary>
    
      <category term="草稿" scheme="http://yoursite.com/categories/%E8%8D%89%E7%A8%BF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="编程范式" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="函数式" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《js函数式编程》第2章</title>
    <link href="http://yoursite.com/2018/04/11/%E3%80%8Ajs%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%AC2%E7%AB%A0/"/>
    <id>http://yoursite.com/2018/04/11/《js函数式编程》第2章/</id>
    <published>2018-04-11T01:59:11.000Z</published>
    <updated>2018-04-11T08:42:37.457Z</updated>
    
    <content type="html"><![CDATA[<p>第2章讲了。</p><a id="more"></a><hr><p>什么是函数式编程？</p><p>静态类型、模式匹配、不变性、纯度等。</p><p>但是本文的主要观点，是“促进”和“一等函数”。</p><p>一等是描述语言里使用方式最多的等级，比如字符。</p><p>它可以用在数组、可以用变量储存、可以是对象属性的值、可以作为参数、可以被函数返回。</p><p>一等函数，表示函数也能以上述的方式使用。</p><h1 id="函数式和其他范式的区别"><a href="#函数式和其他范式的区别" class="headerlink" title="函数式和其他范式的区别"></a>函数式和其他范式的区别</h1><h2 id="函数式和命令式的区别"><a href="#函数式和命令式的区别" class="headerlink" title="函数式和命令式的区别"></a>函数式和命令式的区别</h2><p>命令式就是把我们自然语言的描述，逐句地转化成程序语言。</p><p>函数式则是区分我们自然语言里的某一些概念，用函数把这些概念表达出来，再用函数的组合来表达概念的组合。</p><p>所以我觉得，这其实是自然语言表达时候的区别，也就是说自然语言也有命令式和函数式表达的区别，而不仅仅是函数式。</p><p>我们通常用的表达是命令式的，这也使我们熟悉命令式。</p><p>比如书里举的例子：</p><p><strong>命令式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=99，输出“墙上有X瓶啤酒，拿一个下来，分给大家，墙上还有x-1瓶啤酒”，x--</span><br></pre></td></tr></table></figure><p><strong>函数式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复x次，每次做f(x)</span><br></pre></td></tr></table></figure><h2 id="函数式和面向对象的区别"><a href="#函数式和面向对象的区别" class="headerlink" title="函数式和面向对象的区别"></a>函数式和面向对象的区别</h2><h2 id="函数式和元编程的区别"><a href="#函数式和元编程的区别" class="headerlink" title="函数式和元编程的区别"></a>函数式和元编程的区别</h2><h1 id="Applicative编程"><a href="#Applicative编程" class="headerlink" title="Applicative编程"></a>Applicative编程</h1><p>Applicative编程就是把函数A作为参数传递给函数B。</p><h2 id="集合中心编程"><a href="#集合中心编程" class="headerlink" title="集合中心编程"></a>集合中心编程</h2><p>对于集合，我们要有统一的处理方式。比如map，就是对集合里所有元素遍历；reduce，就是遍历和暂存；filter，就是遍历筛选出符合条件的。</p><h1 id="数据思考"><a href="#数据思考" class="headerlink" title="数据思考"></a>数据思考</h1><p>这里主要就是讲了underscore.js的各种函数的处理结果：基本都是数组。但是你还可以用一个普通object来作为一种简单的关联性数据存储。</p><p>表状数据中，一行就是一个object，一格就是一个键值对。但是用underscore.js处理出来的数据基本都是数组，怎么办呢？于是作者用underscore.js的一些方法，造出了3个与数据库语句类似的方法：select，as，where。用这三个方法操作对象数组，就像用sql语句处理数据库表一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第2章讲了。&lt;/p&gt;
    
    </summary>
    
      <category term="草稿" scheme="http://yoursite.com/categories/%E8%8D%89%E7%A8%BF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="编程范式" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="函数式" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《js函数式编程》读书笔记</title>
    <link href="http://yoursite.com/2018/04/10/%E3%80%8Ajs%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/10/《js函数式编程》读书笔记/</id>
    <published>2018-04-10T08:01:44.000Z</published>
    <updated>2018-04-10T10:26:49.407Z</updated>
    
    <content type="html"><![CDATA[<p>阅读《Javascript函数式编程》时做的笔记。</p><a id="more"></a><hr><h1 id="胡乱说话"><a href="#胡乱说话" class="headerlink" title="胡乱说话"></a>胡乱说话</h1><p>什么是高阶函数，什么是阶？</p><p>函数可以返回函数，这就是高阶函数；被返回的函数里又可以返回函数，每返回一次就叫做一阶。</p><p>为什么需要高阶函数？</p><p>每一阶执行的时候，我们都可以往里填上参数，使其更细节；即使不填入参数，我们也能写一些语句，使得下一阶函数的细节更具体。</p><p>比如我们理解<code>redux-thunk</code>中的<code>index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createThunkMiddleware</code>返回一个函数，这个函数又返回一个函数，又返回一个函数，又返回一个函数……噢天呐，别说理解，看明白这个都要花上好半天。</p><p>但是我们按照之前阶的概念来理解，每返回一个函数，就是一阶，并且这一阶一定做了什么不一样的事情，那么我们就可以列出来这样一个表：</p><ul><li>第一阶：有或没有额外参数</li><li>第二阶：传入<code>store</code>的<code>dispatch</code>和<code>getState</code></li><li>第三阶：传入之前所做的其他变换（next）</li><li>第四阶：传入action</li></ul><p><strong>高阶的本质：为下一阶的执行提供上下文。而上下文，是解释某个概念的含义和用途。</strong></p><p>所以上面那段代码段，用这个思路去解释的话，就是：</p><blockquote><p>如果<code>action</code>是函数，那么调用<code>action</code>给他传入<code>dispatch</code>，<code>getState</code>，和<code>extraArgument</code>；否则，直接返回<code>next</code>对<code>action</code>的执行结果。</p></blockquote><p><code>extraArgument</code>是什么？第一个函数执行后搞定。<code>dispatch</code>和<code>getState</code>是什么？第二个函数执行后搞定。<code>next</code>是什么？第三个函数执行后搞定，<code>action</code>是什么？第四个函数执行后搞定。</p><p><strong>把要搞定的东西说成一句话，这叫需求；把自然语言的这一句话，转化成代码，这叫编程；把自然语言的这一句话，里面需要的各个元素，用函数慢慢地一个个注入进去，这叫函数式编程。</strong></p><hr><h1 id="用函数式思维重构代码"><a href="#用函数式思维重构代码" class="headerlink" title="用函数式思维重构代码"></a>用函数式思维重构代码</h1><p>“可变的地方，我们用函数把参数注入进去”，是上一节最后一句话的缩略版，我打算用这个思路把之前的代码重构一下。在我们app的代码里，有如下的代码：</p><blockquote><p>获取今天的日期，然后输出“2017年9月”等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCurrentYearMonth = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>年<span class="subst">$&#123;month&#125;</span>月`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>获取今天的日期，然后返回数组[年，月，日]，其中月、日小于10的话就补0</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTodayStringArray = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> year = time.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = time.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = time.getDate();</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    year,</span><br><span class="line">    month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month,</span><br><span class="line">    date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>返回今天加或减num天的日期数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDayStringArray = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!num || <span class="keyword">typeof</span> num !== <span class="string">'number'</span>) &#123;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  time.setDate(time.getDate() + num); <span class="comment">//设置日期</span></span><br><span class="line">  <span class="keyword">const</span> year = time.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = time.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = time.getDate();</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    year,</span><br><span class="line">    month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month,</span><br><span class="line">    date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>返回今天的字符串，如”20170201”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTodayString = <span class="function"><span class="params">()</span> =&gt;</span> getTodayStringArray().join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><blockquote><p>给8位日期字符加上短横线。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joinDayStringWithHyphen = <span class="function"><span class="params">dayString</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> year = dayString.slice(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">const</span> month = dayString.slice(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="keyword">const</span> day = dayString.slice(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">  result += year;</span><br><span class="line">  <span class="keyword">if</span> (month) &#123;</span><br><span class="line">    result += <span class="string">'-'</span> + month;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (day) &#123;</span><br><span class="line">    result += <span class="string">'-'</span> + day;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="思考时间"><a href="#思考时间" class="headerlink" title="思考时间"></a>思考时间</h2><p>看着头有点大，因为这几条代码粗看好像相同，细看却又不一样，总而言之就是四个字，有点恶心。现在我们梳理一下，我们对于日期的需求：</p><ol><li><strong>获取日期对象</strong>，这个日期对象可能是今天，也可能是今天加减num天。</li><li><strong>把日期对象划分成一个数组</strong>，[年，月，日，时，分，秒]</li><li><strong>对于数组里面的各个元素进行处理</strong>，比如除了“年“之外，其他小于0的要补前置0。</li><li><strong>划分输出范围</strong>，比如有时候要输出年月，有时候要输出年月日，有时候只需要输出时分秒。</li><li><strong>加上连接词</strong>，比如有的要“年”和“月”，有的要短横线，有的什么都不要</li></ol><p>除了第2条之外，其他的需求都是比较有操作空间的，所以来写代码吧！这次我们要写的可不是什么垃圾，而是集数种日期需求于一身的“要你命三千的时间处理”，命名为timeKing马马虎虎啦。</p><h2 id="编码时间"><a href="#编码时间" class="headerlink" title="编码时间"></a>编码时间</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeKing = <span class="function"><span class="params">dateObject</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 输入必须为date对象。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(dateObject) !== <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'parameter must be a date Object'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> year = dateObject.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = dateObject.getDate();</span><br><span class="line">  <span class="keyword">const</span> hour = dateObject.getHours();</span><br><span class="line">  <span class="keyword">const</span> min = dateObject.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> sec = dateObject.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> array = [year, month, date, hour, min, sec];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后针对需求3写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeKing = <span class="function"><span class="params">dateObject</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 输入必须为date对象。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(dateObject) !== <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'parameter must be a date Object'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> year = dateObject.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = dateObject.getDate();</span><br><span class="line">  <span class="keyword">const</span> hour = dateObject.getHours();</span><br><span class="line">  <span class="keyword">const</span> min = dateObject.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> sec = dateObject.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> array = [year, month, date, hour, min, sec];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">handlerForArrayItem</span> =&gt;</span> &#123;<span class="comment">// 对于数组里面的各个元素进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (handlerForArrayItem === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      handlerForArrayItem = <span class="function"><span class="params">arg</span> =&gt;</span> arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> handledArray = handlerForArrayItem(array);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后针对需求4写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeKing = <span class="function"><span class="params">dateObject</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 输入必须为date对象。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(dateObject) !== <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'parameter must be a date Object'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> year = dateObject.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = dateObject.getDate();</span><br><span class="line">  <span class="keyword">const</span> hour = dateObject.getHours();</span><br><span class="line">  <span class="keyword">const</span> min = dateObject.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> sec = dateObject.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> array = [year, month, date, hour, min, sec];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">handlerForArrayItem</span> =&gt;</span> &#123;<span class="comment">// 对于数组里面的各个元素进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (handlerForArrayItem === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      handlerForArrayItem = <span class="function"><span class="params">arg</span> =&gt;</span> arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> handledArray = handlerForArrayItem(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">outputRange</span> =&gt;</span> &#123;<span class="comment">// 划分输出范围</span></span><br><span class="line">      <span class="keyword">if</span> (outputRange === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        outputRange = <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> rangedArray = outputRange(handledArray);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后针对需求5写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeKing = <span class="function"><span class="params">dateObject</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 输入必须为date对象。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(dateObject) !== <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'parameter must be a date Object'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> year = dateObject.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> month = dateObject.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> date = dateObject.getDate();</span><br><span class="line">  <span class="keyword">const</span> hour = dateObject.getHours();</span><br><span class="line">  <span class="keyword">const</span> min = dateObject.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> sec = dateObject.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> array = [year, month, date, hour, min, sec];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">handlerForArrayItem</span> =&gt;</span> &#123;<span class="comment">// 对于数组里面的各个元素进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (handlerForArrayItem === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      handlerForArrayItem = <span class="function"><span class="params">arg</span> =&gt;</span> arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> handledArray = handlerForArrayItem(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">outputRange</span> =&gt;</span> &#123;<span class="comment">// 划分输出范围</span></span><br><span class="line">      <span class="keyword">if</span> (outputRange === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        outputRange = <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> rangedArray = outputRange(handledArray);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">conjunction</span> =&gt;</span> &#123;<span class="comment">// 加上连接词。</span></span><br><span class="line">        <span class="keyword">if</span> (conjunction === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          conjunction = <span class="function"><span class="params">arg</span> =&gt;</span> arg.join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> conjunction(rangedArray);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个…时间处理王中王怎么用呢，emmmm:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeKing(<span class="comment">/* 时间对象 */</span>)(<span class="comment">/* 对每个元素做处理 */</span>)(<span class="comment">/* 划分输出的范围 */</span>)(<span class="comment">/* 加上连接词 */</span>);</span><br></pre></td></tr></table></figure><h2 id="测试时间"><a href="#测试时间" class="headerlink" title="测试时间"></a>测试时间</h2><p>还是看看用这个王中王怎么实现我们之前的需求吧。</p><blockquote><p>获取今天的日期，然后输出“2017年9月”等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addFrontZero = <span class="function"><span class="params">number</span> =&gt;</span> +number &lt; <span class="number">10</span> ? <span class="string">'0'</span> + number : <span class="string">''</span> + number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFrontZeroHandler = <span class="function"><span class="params">array</span> =&gt;</span> array.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item &gt;= <span class="number">1970</span> ? item : addFrontZero(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CNConjunction = <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> array.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (idx) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'年'</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'月'</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'日'</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'时'</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'分'</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'秒'</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yearMonthRange = <span class="function"><span class="params">array</span> =&gt;</span> array.slice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timeKing(<span class="keyword">new</span> <span class="built_in">Date</span>())(addFrontZeroHandler)(yearMonthRange)(CNConjunction));</span><br></pre></td></tr></table></figure><blockquote><p>获取今天的日期，然后返回数组[年，月，日]，其中月、日小于10的话就补0</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> yearMonthDayRange = <span class="function"><span class="params">array</span> =&gt;</span> array.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timeKing(<span class="keyword">new</span> <span class="built_in">Date</span>())(addFrontZeroHandler)(yearMonthDayRange)(<span class="function"><span class="params">array</span> =&gt;</span> array));</span><br></pre></td></tr></table></figure><blockquote><p>返回今天加或减num天的日期数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todayPlusDaysObject = <span class="function"><span class="params">days</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  date.setDate(date.getDate() + days);</span><br><span class="line">  <span class="keyword">return</span> date;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(timeKing(todayPlusDaysObject(<span class="number">-10</span>))(addFrontZeroHandler)(yearMonthDayRange)(<span class="function"><span class="params">array</span> =&gt;</span> array));</span><br></pre></td></tr></table></figure><blockquote><p>返回今天的字符串，如”20170201”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(timeKing(<span class="keyword">new</span> <span class="built_in">Date</span>())(addFrontZeroHandler)(yearMonthDayRange)());</span><br></pre></td></tr></table></figure><h2 id="关于时间王中王的总结"><a href="#关于时间王中王的总结" class="headerlink" title="关于时间王中王的总结"></a>关于时间王中王的总结</h2><p>优点：</p><p>写起来思路似乎稍微清晰了一点。</p><p>每个阶段的处理函数只需要写一次。</p><p>缺点：</p><p>对使用者很不友好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeKing()()()();<span class="comment">// 这4个坑你怎么知道哪个坑放啥</span></span><br></pre></td></tr></table></figure><p>要好好用王中王，基本上你必须和作者一样了解它，了解它有几个坑位，了解它每个坑位的输入和期待输出都是什么，了解我写的变换函数应该放在哪个坑位……emmmmmm</p><p>也许是我对函数式理解不够，才会有这种情况发生，所以下一阶段目标就是优化这个想法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读《Javascript函数式编程》时做的笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="编程范式" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="函数式" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS验证微信开发平台的token</title>
    <link href="http://yoursite.com/2018/04/10/NodeJS%E9%AA%8C%E8%AF%81%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E7%9A%84token/"/>
    <id>http://yoursite.com/2018/04/10/NodeJS验证微信开发平台的token/</id>
    <published>2018-04-10T06:37:23.000Z</published>
    <updated>2018-04-10T06:38:24.589Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><p>如果想在微信公众号上让用户体验更多的功能，而不仅仅是让公众号像机器人一样收发有限的信息，你就要成为微信平台开发者，自主开发web app。</p><p>成为微信平台开发者的第一步，是配置一台web服务器。<br>第二步，是配置相关的参数，通过微信的开发者验证，并且把你的服务器地址告知微信服务器。这里单讲第二步。</p><p>详细的配置步骤写在这里：<a href="http://mp.weixin.qq.com/wiki/17/2d4265491f12608cd170a95559800f2d.html" target="_blank" rel="noopener">微信公众平台开发者文档-接入指南</a></p><p>我个人提炼一下这个过程的话，就是微信服务器生成了一系列随机字符，放在url的query里，然后根据你写的服务器地址，发送request。而你的服务器在收到了request之后，分别取出query的各项参数，按照他的规则拼接啦，哈希变化，然后再返回（response）一个值给微信服务器。微信服务器收到之后，如果等于服务器本身设定的那个值，就通过验证。</p><p>后端语言有很多，php，python，node，还有windows平台的，我们这里用node。</p><p>下面是node源码，注意，该源码不是我原创，而是<a href="http://blog.csdn.net/nogrief/article/details/9774773" target="_blank" rel="noopener">csdn博客-NoGrief的博客</a> 的代码调试修改而来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> md5sum = crypto.createHash(<span class="string">"sha1"</span>);</span><br><span class="line">  md5sum.update(str);</span><br><span class="line">  str = md5sum.digest(<span class="string">"hex"</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateToken</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> query = url.parse(req.url,<span class="literal">true</span>).query;</span><br><span class="line">  <span class="comment">//console.log("*** URL:" + req.url);</span></span><br><span class="line">  <span class="comment">//console.log(query);</span></span><br><span class="line">  <span class="keyword">var</span> signature = query.signature;</span><br><span class="line">  <span class="keyword">var</span> echostr = query.echostr;</span><br><span class="line">  <span class="keyword">var</span> timestamp = query[<span class="string">'timestamp'</span>];</span><br><span class="line">  <span class="keyword">var</span> nonce = query.nonce;</span><br><span class="line">  <span class="keyword">var</span> oriArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  oriArray[<span class="number">0</span>] = nonce;</span><br><span class="line">  oriArray[<span class="number">1</span>] = timestamp;</span><br><span class="line">  oriArray[<span class="number">2</span>] = <span class="string">"*********"</span>;<span class="comment">//这里是你在微信开发者中心页面里填的token，而不是****</span></span><br><span class="line">  oriArray.sort();</span><br><span class="line">  <span class="keyword">var</span> original = oriArray.join(<span class="string">''</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Original str : "</span> + original);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Signature : "</span> + signature );</span><br><span class="line">  <span class="keyword">var</span> scyptoString = sha1(original);</span><br><span class="line">  <span class="keyword">if</span>(signature == scyptoString)&#123;</span><br><span class="line">    res.end(echostr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Confirm and send echo back"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">"false"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Failed!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webSvr = http.createServer(validateToken);</span><br><span class="line">webSvr.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Start validate"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码保存为tokenValidate.js或者任何你喜欢的名字。</p><p>你也许会问，为啥监听的是8000端口而不是80端口？<br>因为ubuntu下使用80端口很麻烦而且有安全问题，所以我上网查了资料，把8000端口的监听也改在80端口，这样一来，8000端口的信息会自动转到80端口去。<br>这是资料：<a href="http://stackoverflow.com/questions/16573668/best-practices-when-running-node-js-with-port-80-ubuntu-linode" target="_blank" rel="noopener">StackOverFlow-Best practices when running Node.js with port 80(Ubuntu/Lincode)</a></p><p>然后在微信开发者中心里点提交，就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;如果想在微信公众号上让用户体验更多的功能，而不仅仅是让公众号像机器人一样收发有限的信息，你就要成为微信平台开发者，自主开发web app。&lt;/p&gt;
&lt;p&gt;成为微信平台开发者的第一步，是配置一台web服务器。&lt;br&gt;第二步，是配置
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>一道算法题（next smaller）</title>
    <link href="http://yoursite.com/2018/04/10/%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88next%20smaller%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/10/一道算法题（next smaller）/</id>
    <published>2018-04-10T06:34:16.000Z</published>
    <updated>2018-04-10T06:36:22.602Z</updated>
    
    <content type="html"><![CDATA[<p>挺有意思的一道题，这题的重点是数学理解。</p><a id="more"></a><hr><h2 id="题目如下："><a href="#题目如下：" class="headerlink" title="题目如下："></a>题目如下：</h2><p>给定某一个正整数，组成这个数的数字不变，返回下一个比它小的数，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nextSmaller(<span class="number">21</span>) == <span class="number">12</span></span><br><span class="line">nextSmaller(<span class="number">531</span>) == <span class="number">513</span></span><br><span class="line">nextSmaller(<span class="number">907</span>) == <span class="number">790</span></span><br><span class="line">nextSmaller(<span class="number">51226262651257</span>) == <span class="number">51226262627551</span></span><br></pre></td></tr></table></figure><p>如果没有下一个比它小的数字，或者下一个比它小的数字以0开头，则返回-1，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nextSmaller(<span class="number">9</span>) == <span class="number">-1</span></span><br><span class="line">nextSmaller(<span class="number">111</span>) == <span class="number">-1</span></span><br><span class="line">nextSmaller(<span class="number">135</span>) == <span class="number">-1</span></span><br><span class="line">nextSmaller(<span class="number">1027</span>) == <span class="number">-1</span> <span class="comment">// 0721以0开头，所以返回-1</span></span><br></pre></td></tr></table></figure><hr><h2 id="算法描述（找到下一个比它小的数）："><a href="#算法描述（找到下一个比它小的数）：" class="headerlink" title="算法描述（找到下一个比它小的数）："></a>算法描述（找到下一个比它小的数）：</h2><p><strong>1.find pivot：</strong>这个数从右往左，一位位地来比较，如果第i位的数字，比第i+1位的数字大，则把第i位的数字置为pivot（标志位）。<br><strong>2.swap：</strong>从pivot位向右，找到比pivot小的最大的那个数，并与pivot交换。<br><strong>3.sort：</strong>交换后，把pivot位向右（注意是pivot的index，不是pivot的值）的所有数字降序排列。<br>这样，新得到的数就是下一个比它小的数。</p><hr><h2 id="举例分析："><a href="#举例分析：" class="headerlink" title="举例分析："></a>举例分析：</h2><p>比如我们拿54123来分析。<br><strong>1.find pivot：</strong>从最右边的3来看，因为3没有第i+1位数字（3没有右边），所以左移一位到2；2比右边的3小，所以继续左移一位到1；同理，1也比2要小，所以继续左移一位到4；4比1要大了，那么把4置为pivot，这时停止。<br><strong>2.swap：</strong>现在4是pivot，那么从4向右，有1，2，3三个数字，并且都比4小，这其中3是最大的，所以把4和3的位置交换，得到53124。<br><strong>3.sort：</strong>交换后，pivot位上是3，把3往右的所有数字降序排列，得到53421，这就是下一个比54123小的数。</p><hr><h2 id="为什么这样做？"><a href="#为什么这样做？" class="headerlink" title="为什么这样做？"></a>为什么这样做？</h2><p>下面是我自己思考的为什么，不一定对。</p><p>对于每个数，它最小的排列只有1种情况，就是权位从高到低，数字从小到大排列。<br>比如123的最小排列就是123。<br>对于54123来说，从右向左可以分割为3，23，123，这三种情况都是最小排列。<br>也就是说，如果我们只对3或者23或者123进行重组，是没有变化的。<br>于是再向左进行分割，得到5和4123，发现4123已经不再是最小排列了，换句话说4123肯定有下一个比它小的数，就把4标记出来，对4123进行重组。<br>怎么重组呢？最高的权位，放上比4稍小的，也就是3，然后对于3xxx的后三位，放上值最大的情况，就是412的降序排列421，这样就能保证“3421是4123的上一个数”。</p><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这个算法一句话总结：对于某个数，从右向左找它的子列，如果子列是最小排列，那子列没法重组，继续向右；如果子列不是最小排列，就对子列进行重组。</p><p>感觉算法里，“分治”加“pivot（标志位）”的解法很常用啊，把复杂情况分成最简单的子情况，如果符合规律，那么子情况扩充，如果不符合规律，那么置上标志位，再进行考虑。</p><hr><h2 id="下面是写得不怎么样的代码："><a href="#下面是写得不怎么样的代码：" class="headerlink" title="下面是写得不怎么样的代码："></a>下面是写得不怎么样的代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextSmaller</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  (num + <span class="string">""</span>).split(<span class="string">""</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    arr.push(<span class="built_in">parseInt</span>(val));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 1st: find the pivot, if digit is greater than its right digit, it becomes a pivot</span></span><br><span class="line">  <span class="keyword">var</span> pivot = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = arr.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      pivot = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2nd: find the least less than the pivot, and swap them</span></span><br><span class="line">  <span class="keyword">var</span> swap = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = pivot + <span class="number">1</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (swap &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">        swap = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[pivot] &amp;&amp; arr[i] &gt; arr[swap]) &#123;</span><br><span class="line">        swap = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _mem;</span><br><span class="line">  _mem = arr[pivot];</span><br><span class="line">  arr[pivot] = arr[swap];</span><br><span class="line">  arr[swap] = _mem;</span><br><span class="line">  <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3rd: sort the right of pivot, decreasingly</span></span><br><span class="line">  <span class="keyword">var</span> firstArray = arr.slice(<span class="number">0</span>, pivot + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> secondArray = arr.slice(pivot + <span class="number">1</span>);</span><br><span class="line">  secondArray.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b -a;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 4th: return val</span></span><br><span class="line">  <span class="keyword">var</span> result = (firstArray.concat(secondArray)).join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span> (result == num)&#123;</span><br><span class="line">    <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;挺有意思的一道题，这题的重点是数学理解。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>三目（三元）运算符??::的形式</title>
    <link href="http://yoursite.com/2018/04/10/%E4%B8%89%E7%9B%AE%EF%BC%88%E4%B8%89%E5%85%83%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%9A%84%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/10/三目（三元）运算符-的形式/</id>
    <published>2018-04-10T06:25:01.000Z</published>
    <updated>2018-04-10T06:31:56.160Z</updated>
    
    <content type="html"><![CDATA[<p>一个三元运算符你能理解，多用几个呢？</p><a id="more"></a><hr><p>三目运算符相信大家都很熟悉了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo ? <span class="string">'foo == true'</span> : <span class="string">'foo == false'</span></span><br></pre></td></tr></table></figure></p><p>而三目运算符<code>?:?:?.....</code>的调用方式大家也不陌生, 就相当于一堆if - else if语句：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo ? <span class="string">'foo == true'</span> : bar ? <span class="string">'bar == true'</span> : <span class="string">'bar == false'</span></span><br></pre></td></tr></table></figure></p><p>但是在zepto.js里有一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">slice.call(</span><br><span class="line">  isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class="line">  maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></span><br><span class="line">  element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></span><br><span class="line">  element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>这里的三目运算符用的是<code>？？：：</code>的形式，我搞不太懂，所以打算做个实验搞懂它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool1 = <span class="literal">true</span>, bool2 = <span class="literal">true</span>, val1 = <span class="string">'val1'</span>, val2 = <span class="string">'val2'</span>, val3 = <span class="string">'val3'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bool1 ? bool2 ? val1 : val2 : val3);</span><br></pre></td></tr></table></figure><p>用表格记录下4个不同点情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool1bool2值</span><br><span class="line"><span class="literal">true</span><span class="literal">true</span>val1</span><br><span class="line"><span class="literal">true</span><span class="literal">false</span>val2</span><br><span class="line"><span class="literal">false</span><span class="literal">true</span>val3</span><br><span class="line"><span class="literal">false</span><span class="literal">false</span>val3</span><br></pre></td></tr></table></figure></p><p>可以看出上面的代码等价于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(bool1 ? ( bool2 ? val1 : val2 ) : val3);</span><br></pre></td></tr></table></figure></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="noopener">条件（三元）运算符 -mdn</a>上说三目运算符具有右结合性，根据以上两个例子，我总结三目运算符右结合性的意思是：</p><h2 id="从最右边取”-”-然后看它左边相邻的符号，如果是”-”-那么它和这个”-”结合起来，可以用一个（）把它俩包住；如果左边相邻的符号是”-”，那么取左边的”-”，再重复这个判断"><a href="#从最右边取”-”-然后看它左边相邻的符号，如果是”-”-那么它和这个”-”结合起来，可以用一个（）把它俩包住；如果左边相邻的符号是”-”，那么取左边的”-”，再重复这个判断" class="headerlink" title="从最右边取”:”, 然后看它左边相邻的符号，如果是”?”,那么它和这个”?”结合起来，可以用一个（）把它俩包住；如果左边相邻的符号是”:”，那么取左边的”:”，再重复这个判断."></a>从最右边取”:”, 然后看它左边相邻的符号，如果是”?”,那么它和这个”?”结合起来，可以用一个（）把它俩包住；如果左边相邻的符号是”:”，那么取左边的”:”，再重复这个判断.</h2><p>比如：<br>    ?:?:?:?:?:<br>可以取为</p><pre><code>?:(?:(?:(?:(?:))))</code></pre><p>而</p><pre><code>???:::</code></pre><p>可以取为</p><pre><code>?(?(?:):):</code></pre><p>然后根据你加上的括号，可以写出等价的if判断语句，这样就能理解复杂三目运算符所包含的意义了。</p><p>注意，三目运算符中”?”和”:”是成对出现的，最起码数量上，有几个”?”就会有几个”:”.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个三元运算符你能理解，多用几个呢？&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Array.prototype.slice及其他Array方法</title>
    <link href="http://yoursite.com/2018/04/10/Array-prototype-slice%E5%8F%8A%E5%85%B6%E4%BB%96Array%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/10/Array-prototype-slice及其他Array方法/</id>
    <published>2018-04-10T06:19:27.000Z</published>
    <updated>2018-04-10T06:23:38.776Z</updated>
    
    <content type="html"><![CDATA[<p>用Array的方法，对不是Array的东西做一些事情…</p><a id="more"></a><hr><p>call方法真是一个有意思的东西，它可以改变函数调用时this的值。而我们知道，在函数里，this指向了调用这个函数的环境对象，比如一道经典面试题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  num: <span class="number">1</span>,</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = obj.show;</span><br><span class="line">obj.show();<span class="comment">/* 显示1；show是被obj调用的，所以this指向obj */</span></span><br><span class="line">foo();<span class="comment">/* 显示2；相当于global.foo(),所以this指向global，如果在浏览器里global就是window */</span></span><br></pre></td></tr></table></figure><p><strong>换句话说，如果一个对象obj上有方法foo，你可以通过<code>obj.foo()</code>调用；如果没有obj上没有方法foo，<code>obj.foo()</code>是会报错的，但是，使用<code>foo.call(obj)</code>，可以强行达到<code>obj.foo()</code>的效果，比如：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    num: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p><code>Array.prototype.slice.call</code>的用处就是这样，可以在array-like（类数组，就是长得像数组，但不是数组）的对象上强行使用slice方法，比如：<code>Array.prototype.slice.call(arguments)</code>就是把<code>arguments</code>对象转化为数组。当然，除了<code>arguments</code>，我们还能在<code>HTMLCollection</code>或<code>NodeList</code>身上使用。<strong>那么到底什么算是类数组呢？</strong></p><p><strong>有length属性的对象。</strong></p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].slice.call(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">/* [ 'Tom', 'Jack', 'Jason' ] */</span></span><br></pre></td></tr></table></figure><p>那如果没有length呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].slice.call(obj1);<span class="comment">//* [] */</span></span><br></pre></td></tr></table></figure><p>原来没有length属性的对象也会被转为数组，只不过认为它length=0而已。</p><p>那如果对象的属性没有按照0-n顺序乖乖排好呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'Jason'</span>,</span><br><span class="line">  <span class="number">7</span>: <span class="string">'Dave'</span>,</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].slice.call(obj1);<span class="comment">/* [ , 'Tom', , 'Jack', , 'Jason' ] */</span></span><br></pre></td></tr></table></figure><p>原来转化的时候，会以<code>length</code>为基础，生成一个长度为<code>length</code>的数组，<code>obj</code>的属性是数组的有效<code>index</code>的话，就会把对应值填入到对应位置，其他的位置找不到值，就会填入<code>undefined</code>。</p><p>所以前面的说法其实不对，所有的对象都可以被视为类数组，有<code>length</code>的视为长度为<code>length</code>的数组，没有的，视为长度为0的数组。</p><p><strong>以<code>length</code>属性为基础</strong></p><p>这句话很重要。</p><p>另外，<code>call</code>方法的参数如果是<code>原始值类型</code>，会传入它的<code>自动包装对象</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [].slice.call(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [].slice.call(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>));<span class="comment">/* [ 'h', 'e', 'l', 'l', 'o' ] */</span></span><br><span class="line"></span><br><span class="line">因为<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>)就是</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">"h"</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">"e"</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">"l"</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">"l"</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">"o"</span>,</span><br><span class="line">    length: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是<code>Array.prototype.slice.call</code>的一些细节，那么除了<code>slice</code>之外，<code>Array</code>对象还有很多其他的方法，这些方法是不是也能用到对象身上呢？</p><h2 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join"></a>Array.prototype.join</h2><p>join方法是把数组转化为字符串的方法，具体表现不再赘述，看两个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].join.call(obj1, <span class="string">'-'</span>);<span class="comment">// Tom-Jack-Jason</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].join.call(obj1, <span class="string">'-'</span>); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure></p><p>还是那句话，<strong>以<code>length</code>为基础</strong>,没有<code>length</code>属性的，视为长度为0的数组。</p><h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push"></a>Array.prototype.push</h2><p>这个方法比较好玩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].push.call(obj1, <span class="string">'Dave'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// 7，因为push方法返回的是push之后array的操作数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'Tom', '1': 'Jack', '2': 'Jason', '6': 'Dave', length: 7 &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>obj1</code>里新增属性<code>6</code>，值为<code>&#39;Dave&#39;</code>，并且<code>length</code>也更新为<code>7</code>，这说明调用<code>push</code>时会对原有对象进行修改。<br>我们可以利用这个特性，比如当我们需要一个<code>obj1</code>的类数组副本时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">'foo'</span>,</span><br><span class="line">  bar: <span class="string">'bar'</span>,</span><br><span class="line">  cei: <span class="string">'cei'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> copy = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  [].push.call(copy, obj[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(copy);<span class="comment">// &#123; '0': 'foo', '1': 'bar', '2': 'cei', length: 3 &#125;</span></span><br></pre></td></tr></table></figure><p>如果，没有传入<code>length</code>呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].push.call(obj1, <span class="string">'Dave'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'Dave', '1': 'Jack', '2': 'Jason', length: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>这里的行为有些诡异，不过也更好地解释了<strong>以length为基础</strong>这句话：<br>没有<code>length</code>的时候，认为数组长度为<code>0</code>，并且会对<code>obj</code>进行修改，把属性0的值改为<code>Dave</code>.</p><p>那么，会举一反三的话，对于<code>pop</code>, <code>shift</code>和<code>unshift</code>这三个方法的行为应该能想象得出来，就不再赘述了。</p><h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse"></a>Array.prototype.reverse</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'Tom'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'Jason'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].reverse.call(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// &#123; '3': 'Jason', '4': 'Jack', '5': 'Tom', length: 6 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '3': 'Jason', '4': 'Jack', '5': 'Tom', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><p><code>reverse</code>的话，<code>arr === obj1</code></p><h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].sort.call(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// &#123; '0': 'a', '1': 'b', '2': 'c', length: 6 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'a', '1': 'b', '2': 'c', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><p><code>sort</code>也一样，<code>arr === obj1</code></p><h2 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h2><p><code>concat</code>的表现就不是我们意料之中的了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = &#123;</span><br><span class="line">  foo: <span class="string">'foo'</span>,</span><br><span class="line">  bar: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].concat.call(obj1, add);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;, 'foo', 'bar' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].concat.call(obj1, <span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;, 'foo', 'bar' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>obj1</code>并不会改变，不会像<code>push</code>一样会接着形成一个类数组的对象.</p><h2 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice"></a>Array.prototype.splice</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].splice.call(obj1, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ 'c' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'b', '1': 'a', length: 5 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].splice.call(obj1, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'foo'</span>,<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'foo', '2': 'bar', '3': 'b', '4': 'a', length: 8 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].splice.call(obj1, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'foo'</span>,<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ 'b' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'foo', '2': 'bar', '3': 'a', length: 7 &#125;</span></span><br></pre></td></tr></table></figure><p><code>splice</code>的行为回归了，它现在对<code>obj1</code>产生影响，并且是我们预计的样子</p><h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every"></a>Array.prototype.every</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].every.call(obj1, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="string">'a'</span> || val === <span class="string">'c'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter"></a>Array.prototype.filter</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].filter.call(obj1, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="string">'a'</span> || val === <span class="string">'c'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ 'c', 'a' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach"></a>Array.prototype.forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].forEach.call(obj1, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val + <span class="string">' add'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map"></a>Array.prototype.map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].map.call(obj1, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val + <span class="string">' add'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// [ 'c add', 'b add', 'a add', , ,  ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce"></a>Array.prototype.reduce</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'c'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'a'</span>,</span><br><span class="line">  length: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [].reduce.call(obj1, <span class="function"><span class="keyword">function</span> (<span class="params">pre, cur</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre + <span class="string">' '</span> + cur</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr: '</span>, arr);<span class="comment">// 'c b a'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj: '</span>, obj1);<span class="comment">// &#123; '0': 'c', '1': 'b', '2': 'a', length: 6 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Array的方法，对不是Array的东西做一些事情…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>echarts源码阅读修改</title>
    <link href="http://yoursite.com/2018/04/10/echarts%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BF%AE%E6%94%B9/"/>
    <id>http://yoursite.com/2018/04/10/echarts源码阅读修改/</id>
    <published>2018-04-10T06:13:04.000Z</published>
    <updated>2018-04-10T06:18:32.722Z</updated>
    
    <content type="html"><![CDATA[<p>产品经理一个蛋疼的需求，着实让我研究了半天。</p><a id="more"></a><hr><p>问题描述：</p><p>echarts有个bug，比如如果用下面这套配置（可以到echarts官网=&gt;作品=&gt;官方示例=&gt;随便打开一个，把配置粘进去就能重现。如果你要弄明白我下面在说什么，请重现这张图，下面说的东西都是以这个option生成的图做例子）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'axis'</span>,</span><br><span class="line">        axisPointer: &#123;</span><br><span class="line">            type: <span class="string">'cross'</span>,</span><br><span class="line">            crossStyle: &#123;</span><br><span class="line">                color: <span class="string">'#999'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            dataView: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">            magicType: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">type</span>: [<span class="string">'line'</span>, <span class="string">'bar'</span>] &#125;,</span><br><span class="line">            restore: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            saveAsImage: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data: [<span class="string">'蒸发量'</span>, <span class="string">'平均温度'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: [&#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        data: [<span class="string">'1月'</span>, <span class="string">'2月'</span>, <span class="string">'3月'</span>, <span class="string">'4月'</span>, <span class="string">'5月'</span>, <span class="string">'6月'</span>, <span class="string">'7月'</span>, <span class="string">'8月'</span>, <span class="string">'9月'</span>, <span class="string">'10月'</span>, <span class="string">'11月'</span>, <span class="string">'12月'</span>],</span><br><span class="line">        axisPointer: &#123;</span><br><span class="line">            type: <span class="string">'shadow'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    yAxis: [&#123;</span><br><span class="line">            type: <span class="string">'value'</span>,</span><br><span class="line">            name: <span class="string">'水量'</span>,</span><br><span class="line">            <span class="comment">// min: 50,</span></span><br><span class="line">            <span class="comment">// max: 250,</span></span><br><span class="line">            <span class="comment">// interval: 50,</span></span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                formatter: <span class="string">'&#123;value&#125; ml'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'value'</span>,</span><br><span class="line">            name: <span class="string">'温度'</span>,</span><br><span class="line">            <span class="comment">// min: 20,</span></span><br><span class="line">            <span class="comment">// max: 25,</span></span><br><span class="line">            <span class="comment">// interval: 5,</span></span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                formatter: <span class="string">'&#123;value&#125; °C'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    series: [&#123;</span><br><span class="line">            name: <span class="string">'蒸发量'</span>,</span><br><span class="line">            type: <span class="string">'bar'</span>,</span><br><span class="line">            data: [<span class="number">2.0</span>, <span class="number">4.9</span>, <span class="number">-7.0</span>, <span class="number">23.2</span>, <span class="number">25.6</span>, <span class="number">76.7</span>, <span class="number">135.6</span>, <span class="number">162.2</span>, <span class="number">32.6</span>, <span class="number">20.0</span>, <span class="number">6.4</span>, <span class="number">3.3</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'平均温度'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">            yAxisIndex: <span class="number">1</span>,</span><br><span class="line">            data: [<span class="number">22.0</span>, <span class="number">22.2</span>, <span class="number">23.3</span>, <span class="number">24.5</span>, <span class="number">26.3</span>, <span class="number">20.2</span>, <span class="number">20.3</span>, <span class="number">23.4</span>, <span class="number">23.0</span>, <span class="number">26.5</span>, <span class="number">22.0</span>, <span class="number">26.2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    dataZoom: [&#123;</span><br><span class="line">        yAxisIndex: <span class="number">1</span>,</span><br><span class="line">        start: <span class="number">0</span>,</span><br><span class="line">        end: <span class="number">100</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>在放大缩小之前，一切都是正常的，但是一旦你缩放了，x轴的位置就变了，蒸发量有正有负的数据，也不再在x轴的上下显示。</p><p>这很奇怪，我明明放大缩小的是y2轴的数据，凭什么y1轴的样子也要跟着变。</p><p>目标：</p><p>研究echarts代码，看看是否需要重写部分代码，如果需要，怎么重写，能够解决这个问题。</p><p>过程：</p><p>首先在浏览器中打断点了之后，一路跟踪下来，发现echarts画图是至少分两步的（就目前知道的情况来说），它会先画出坐标轴，再画数据图像，那我们先看坐标轴怎么画的。</p><p><code>this._doPaintList(list, paintAll);</code> 这一句是画坐标轴的函数，其中，参数list是一个array，里面的元素是object，应该是坐标轴上点的各种参数。这个list是通过之前一系列复杂的步骤生成的，在下面的文章中，用list指代list，el指代list的元素。</p><p>对list进行循环遍历，首先根据el的Zlevel取出指定的Layer（理解为图层）。这里为啥要先取出Layer，是因为echarts支持多层绘制，每一层是一个单独的canvas，所以el要绘制到指定的层的canvas上去。</p><p>//TODO:elFrame是干什么的？elFrame == -1是正常的画图，elFrame &gt;= 0是什么?</p><p>接着，在循环遍历里，走到最后一步 <code>this._doPaintEl(el, currentLayer, paintAll, scope);</code>  el不用解释了，currentLayer是前面取出来的el指定的图层，//TODO:paintAll和scope不知道是啥</p><p>进到 this._doPaintEl(el, currentLayer, paintAll, scope); ，发现最终绘制el的语句是 el.brush(ctx, scope.prevEl || null); ，所以准备进到这个函数里看下，但是看完这个，应该也没必要再深究绘制坐标轴的。</p><p>为啥呢？因为很明显，这一部分只是忠实的绘制list里面的el，list是什么样，就会画成什么样，而对于“为什么echarts会这样画这个图？”这个问题，现在可以等价转换为“为什么echarts会生成这个list？”，所以后面我们需要深入研究生成list的算法。但在这之前，先看看el哪些东西影响了画图。</p><p>进到 <code>el.brush(ctx, scope.prevEl || null);</code> 里面才发现，即使都是list中的el，它们之间也是互不相同的。如果这个el负责画直线，那么它是Line的实例；如果这个el要显示文字，那么它是Text的实例。el可能是不同的类，它们的相似之处是都有一个叫brush的方法，接收相同的参数，完成差不多的任务。</p><p>根据list来画图的部分先看到这里，就像之前说的，看看怎么生成的list。</p><p>生成list是靠这一句 <code>var list = this.storage.getDisplayList(true);</code> ，那么这个 <code>getDisplayList(true);</code> 是啥？请看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getDisplayList: <span class="function"><span class="keyword">function</span> (<span class="params">update, includeIgnore</span>) </span>&#123;</span><br><span class="line">    includeIgnore = includeIgnore || <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (update) &#123;</span><br><span class="line">        <span class="keyword">this</span>.updateDisplayList(includeIgnore);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._displayList;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>复制代码<br>在 <code>getDisplayList(true);</code> 里，<code>this</code>指向的是<code>Storage</code>对象，而<code>Storage._displayList</code>被直接返回了，那么看看里面的 <code>this.updateDisplayList(includeIgnore);</code>是怎么影响<code>Storage._displayList</code>的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">updateDisplayList: <span class="function"><span class="keyword">function</span>(<span class="params">includeIgnore</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._displayListLen = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> roots = <span class="keyword">this</span>._roots;</span><br><span class="line">  <span class="keyword">var</span> displayList = <span class="keyword">this</span>._displayList;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = roots.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>._updateAndAddDisplayable(roots[i], <span class="literal">null</span>, includeIgnore);</span><br><span class="line">  &#125;</span><br><span class="line">  displayList.length = <span class="keyword">this</span>._displayListLen;</span><br><span class="line">  env.canvasSupported &amp;&amp; timsort(displayList, shapeCompareFunc);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>在上面这段代码中，this指向Storage对象。而<code>this._roots</code>则是一个数组（貌似长度确定是10？），<code>this._roots</code>里面的元素是一个Group对象（也就是代码里的roots[i]）传入到了 <code>this._updateAndAddDisplayable(roots[i], null, includeIgnore);</code> 。</p><p>在<code>this._updateAndAddDisplayable(roots[i], null, includeIgnore);</code> 这个函数里不再进行其他调用，说明在这里面对<code>Storage._displayList</code>造成了直接影响，而这个<code>Group</code>作为直接传入 <code>this._updateAndAddDisplayable</code>的参数，肯定有关系。</p><p>这个Group是什么呢？</p><p>单步调试的时候，研究第一个Group（也就是roots[0]）,发现Group._children是一个数组，有6个元素，5个是Path类，1个是Sub类，其中Sub类是在canvas里绘制基本图形的类，Sub.type如果为’line’,那么就会画一条直线，如果为’rect’,那么会画矩形。</p><p>Path类又是什么？点进去详细调查，发现Path.__title的值，和echarts上面toolbox的内容一一对应，于是恍然大悟，原来第一个Group里装着的是toolbox的零件。</p><p>接着调查，第二第三个Group的_children都是空数组，看第四个Group。第四个Group的_children只有一个元素，也是一个Group，它的_children,也就是绝对位置roots[3]._children[0]._children里面有9个元素，里面8个是Sub第一条y轴的横线（就是浅灰色，与x轴等长的那几条），剩下一个又是Group，它的_children里面有18个元素，9个Text9个Sub。调查之后发现，9个Text中有8个是第一条y轴的刻度上文字，剩下1个是第一条y轴的名字；9个sub中有8个是第一条y轴的刻度短横线，非常短的一条，位于刻度上文字的右边，剩下1个是第一条y轴本身。所以我们明白了，第四个Group就是第一条y轴的所有零件，包含8条y轴横线，8个刻度上文字，和对应的8条刻度短刻线，1条y轴和1个对应的y轴文字。</p><p>那么，第5个Group我们就能猜想一下了，应该是第2条y轴的零件吧。调查了一下，果不其然，确实是第2条y轴的零件。<br>第6个Group的_children也是1个元素的数组，这个元素是Group类；这个Group类的_children还是一个1元素的数组，看它的_children，里面有26个元素，12个Text类，14个Sub类，看了一眼，12个Text是x轴刻线上的文字，也就是1月、2月…12月，而13个Sub类是13条x轴的短刻线，还剩下1个Sub类就是x轴本身了。至此，我们第一阶段的目标应该相当明白了，第4个Group和第5个Group，也就是第2条y轴和x轴的零件生成的方式，是我们达成目的的主体。它俩这个Group是怎么生成的，使我们下一阶段的研究对象。</p><p>这一段概括一下剩下的Group都是什么，毕竟不是主体，一笔带过就好。第7个Group没有_children；第8个Group是图例的零件，也就是“蒸发量”和“平均温度”那一块；第9个Group是12个蒸发量的小红块儿；第10个Group是平均温度的那条线，包含了12个圆点和把12个圆点连起来的一条折线。</p><p>哦，原来整张图在最开始就已经生成好了，那为什么先出现坐标轴再出现的内容呢？有待探究。</p><hr><p>好的，那么我们下一阶段的工作就很明确了，假设我们给第2条y轴加上一个新属性叫<code>origin</code>，用来表示这条y轴和x轴的交点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yAxis: [&#123;</span><br><span class="line">  type: <span class="string">'value'</span>,</span><br><span class="line">  name: <span class="string">'水量'</span>,</span><br><span class="line">  axisLabel: &#123;</span><br><span class="line">    formatter: <span class="string">'&#123;value&#125; ml'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  type: <span class="string">'value'</span>,</span><br><span class="line">  name: <span class="string">'温度'</span>,</span><br><span class="line">  origin: <span class="number">20</span>,</span><br><span class="line">  axisLabel: &#123;</span><br><span class="line">    formatter: <span class="string">'&#123;value&#125; °C'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>ok整理一下，我们有Storage._roots这个Array，里面存放着画一张echarts的所有零件，那么这个Storage._roots是在什么阶段生成的，又是怎么生成的?</p><p>那么怎么样修改源码才能让这条y轴的各个零件，还有它的图形（在这个例子中，是第10个Group里的点）都能按照图例来生成</p><p>接着上次的文章，我们这次需要知道Storage._roots是在什么时候生成的，以及怎么生成的。</p><p>我们watch<code>this._zr.storage._roots</code>的变化（为什么是这个？参考echarts的类依赖图），在<code>setOption</code>里单步调试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">echartsProto.setOption = <span class="function"><span class="keyword">function</span> (<span class="params">option, notMerge, lazyUpdate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        zrUtil.assert(!<span class="keyword">this</span>[IN_MAIN_PROCESS], <span class="string">'`setOption` should not be called during main process.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> silent;</span><br><span class="line">    <span class="keyword">if</span> (zrUtil.isObject(notMerge)) &#123;</span><br><span class="line">        lazyUpdate = notMerge.lazyUpdate;</span><br><span class="line">        silent = notMerge.silent;</span><br><span class="line">        notMerge = notMerge.notMerge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._model || notMerge) &#123;</span><br><span class="line">        <span class="keyword">var</span> optionManager = <span class="keyword">new</span> OptionManager(<span class="keyword">this</span>._api);</span><br><span class="line">        <span class="keyword">var</span> theme = <span class="keyword">this</span>._theme;</span><br><span class="line">        <span class="keyword">var</span> ecModel = <span class="keyword">this</span>._model = <span class="keyword">new</span> GlobalModel(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">        ecModel.init(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FIXME</span></span><br><span class="line">    <span class="comment">// ugly</span></span><br><span class="line">    <span class="keyword">this</span>.__lastOnlyGraphic = !!(option &amp;&amp; option.graphic);</span><br><span class="line">    zrUtil.each(option, <span class="function"><span class="keyword">function</span> (<span class="params">o, mainType</span>) </span>&#123;</span><br><span class="line">        mainType !== <span class="string">'graphic'</span> &amp;&amp; (<span class="keyword">this</span>.__lastOnlyGraphic = <span class="literal">false</span>);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._model.setOption(option, optionPreprocessorFuncs, <span class="keyword">this</span>.__lastOnlyGraphic);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lazyUpdate) &#123;</span><br><span class="line">        <span class="keyword">this</span>[OPTION_UPDATED] = &#123; <span class="attr">silent</span>: silent &#125;;</span><br><span class="line">        <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        updateMethods.prepareAndUpdate.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Ensure zr refresh sychronously, and then pixel in canvas can be</span></span><br><span class="line">        <span class="comment">// fetched after `setOption`.</span></span><br><span class="line">        <span class="keyword">this</span>._zr.flush();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>[OPTION_UPDATED] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        flushPendingActions.call(<span class="keyword">this</span>, silent);</span><br><span class="line">        triggerUpdatedEvent.call(<span class="keyword">this</span>, silent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>发现执行完<code>updateMethods.prepareAndUpdate.call(this);</code>这一句之后，<code>this._zr.storage._roots</code>从<code>Array(0)</code>变成了<code>Array(10)</code><br>在<code>updateMethods.prepareAndUpdate.call(this);</code>里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">prepareAndUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ecModel = <span class="keyword">this</span>._model;</span><br><span class="line"></span><br><span class="line">  prepareView.call(<span class="keyword">this</span>, <span class="string">'component'</span>, ecModel);</span><br><span class="line"></span><br><span class="line">  prepareView.call(<span class="keyword">this</span>, <span class="string">'chart'</span>, ecModel);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// FIXME</span></span><br><span class="line">  <span class="comment">// ugly</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.__lastOnlyGraphic) &#123;</span><br><span class="line">    each(<span class="keyword">this</span>._componentsViews, <span class="function"><span class="keyword">function</span>(<span class="params">componentView</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> componentModel = componentView.__model;</span><br><span class="line">      <span class="keyword">if</span> (componentModel &amp;&amp; componentModel.mainType === <span class="string">'graphic'</span>) &#123;</span><br><span class="line">        componentView.render(componentModel, ecModel, <span class="keyword">this</span>._api, payload);</span><br><span class="line">        updateZ(componentModel, componentView);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.__lastOnlyGraphic = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateMethods.update.call(<span class="keyword">this</span>, payload);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里面，当运行过<code>prepareView.call(this, &#39;component&#39;, ecModel);</code>之后，storage._roots变成了Array(8)，但是这8个Group里面都没有_children；同样的，当运行过<code>prepareView.call(this, &#39;chart&#39;, ecModel);</code>之后，storage._roots变成了Array(10)，新加的两个Group也没有实质的内容。可以认为，这两个语句其实是初始化了storage._roots里面的Group。</p><p>而当执行了`updateMethods.update.call(this, payload);storage._roots里面的Group开始有了内容。老规矩，还是进到这个函数里面，它太长了，我截取了一部分显示出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br><span class="line"><span class="comment">// Save total ecModel here for undo/redo (after restoring data and before processing data).</span></span><br><span class="line"><span class="comment">// Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create new coordinate system each update</span></span><br><span class="line"><span class="comment">// In LineView may save the old coordinate system and use it to get the orignal point</span></span><br><span class="line">coordSysMgr.create(<span class="keyword">this</span>._model, <span class="keyword">this</span>._api);</span><br><span class="line"></span><br><span class="line">processData.call(<span class="keyword">this</span>, ecModel, api);</span><br><span class="line"></span><br><span class="line">stackSeriesData.call(<span class="keyword">this</span>, ecModel);</span><br><span class="line"></span><br><span class="line">coordSysMgr.update(ecModel, api);</span><br><span class="line"></span><br><span class="line">doVisualEncoding.call(<span class="keyword">this</span>, ecModel, payload);</span><br><span class="line"></span><br><span class="line">doRender.call(<span class="keyword">this</span>, ecModel, payload);</span><br></pre></td></tr></table></figure><p>发现执行过了<code>doRender.call(this, ecModel, payload);</code>之后storage._roots发生实质性变化，于是打算再深入调查。有点令人不安的是这排成一排的6个方法，前5个是干什么的？</p><p>现在能知道，倒数第2个，也就是<code>doVisualEncoding.call(this, ecModel, payload);</code>会给ecModel新加两个属性：<code>ec_colorIdx:2</code>和<code>ec_colorNameMap:{平均温度:&quot;#2f4554&quot;,蒸发量:&quot;#c23531&quot;}</code>。</p><p>不过现在管不了这么多了，先试试看只关注<code>doRender.call(this, ecModel, payload);</code>能不能得到想要的结果，在<code>doRender.call(this, ecModel, payload);</code>里面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doRender</span>(<span class="params">ecModel, payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> api = <span class="keyword">this</span>._api;</span><br><span class="line">  <span class="comment">// Render all components</span></span><br><span class="line">  each(<span class="keyword">this</span>._componentsViews, <span class="function"><span class="keyword">function</span>(<span class="params">componentView</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> componentModel = componentView.__model;</span><br><span class="line">    componentView.render(componentModel, ecModel, api, payload);</span><br><span class="line"></span><br><span class="line">    updateZ(componentModel, componentView);</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  each(<span class="keyword">this</span>._chartsViews, <span class="function"><span class="keyword">function</span>(<span class="params">chart</span>) </span>&#123;</span><br><span class="line">    chart.__alive = <span class="literal">false</span>;</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Render all charts</span></span><br><span class="line">  ecModel.eachSeries(<span class="function"><span class="keyword">function</span>(<span class="params">seriesModel, idx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chartView = <span class="keyword">this</span>._chartsMap[seriesModel.__viewId];</span><br><span class="line">    chartView.__alive = <span class="literal">true</span>;</span><br><span class="line">    chartView.render(seriesModel, ecModel, api, payload);</span><br><span class="line"></span><br><span class="line">    chartView.group.silent = !!seriesModel.get(<span class="string">'silent'</span>);</span><br><span class="line"></span><br><span class="line">    updateZ(seriesModel, chartView);</span><br><span class="line"></span><br><span class="line">    updateProgressiveAndBlend(seriesModel, chartView);</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If use hover layer</span></span><br><span class="line">  updateHoverLayerStatus(<span class="keyword">this</span>._zr, ecModel);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove groups of unrendered charts</span></span><br><span class="line">  each(<span class="keyword">this</span>._chartsViews, <span class="function"><span class="keyword">function</span>(<span class="params">chart</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!chart.__alive) &#123;</span><br><span class="line">      chart.remove(ecModel, api);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">type: <span class="string">'cartesianAxis'</span>,</span><br><span class="line"></span><br><span class="line">  axisPointerClass: <span class="string">'CartesianAxisPointer'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @override</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params">axisModel, ecModel, api, payload</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.group.removeAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oldAxisGroup = <span class="keyword">this</span>._axisGroup;</span><br><span class="line">    <span class="keyword">this</span>._axisGroup = <span class="keyword">new</span> graphic.Group();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.group.add(<span class="keyword">this</span>._axisGroup);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!axisModel.get(<span class="string">'show'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gridModel = axisModel.getCoordSysModel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> layout = cartesianAxisHelper.layout(gridModel, axisModel); <span class="comment">//layout接收两个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> axisBuilder = <span class="keyword">new</span> AxisBuilder(axisModel, layout); <span class="comment">//y轴各个零件在这里面构建的，接受两个参数，this._model和layout</span></span><br><span class="line"></span><br><span class="line">    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._axisGroup.add(axisBuilder.getGroup()); <span class="comment">//这里add进去的就是y轴的细节，可见构建y轴是在axisBuilder里完成的。</span></span><br><span class="line"></span><br><span class="line">    zrUtil.each(selfBuilderAttrs, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (axisModel.get(name + <span class="string">'.show'</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">'_'</span> + name](axisModel, gridModel, layout.labelInterval);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    graphic.groupTransition(oldAxisGroup, <span class="keyword">this</span>._axisGroup, axisModel);</span><br><span class="line"></span><br><span class="line">    CartesianAxisView.superCall(<span class="keyword">this</span>, <span class="string">'render'</span>, axisModel, ecModel, api, payload);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><code>componentView.render(componentModel, ecModel, api, payload);</code></p><p><code>return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);</code><br> 为什么<code>this._interval</code>是5，为什么<code>this._extent</code>是[0, 30],为什么<code>this._niceExtent</code>是[0,25]，为什么用了<code>this._niceExtent</code>?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">axisLine: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> opt = <span class="keyword">this</span>.opt;</span><br><span class="line">  <span class="keyword">var</span> axisModel = <span class="keyword">this</span>.axisModel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!axisModel.get(<span class="string">'axisLine.show'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> extent = <span class="keyword">this</span>.axisModel.axis.getExtent();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> matrix = <span class="keyword">this</span>._transform;</span><br><span class="line">  <span class="keyword">var</span> pt1 = [extent[<span class="number">0</span>], <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> pt2 = [extent[<span class="number">1</span>], <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (matrix) &#123;</span><br><span class="line">    v2ApplyTransform(pt1, pt1, matrix);</span><br><span class="line">    v2ApplyTransform(pt2, pt2, matrix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.group.add(<span class="keyword">new</span> graphic.Line(graphic.subPixelOptimizeLine(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Id for animation</span></span><br><span class="line">    anid: <span class="string">'line'</span>,</span><br><span class="line"></span><br><span class="line">    shape: &#123;</span><br><span class="line">      x1: pt1[<span class="number">0</span>],</span><br><span class="line">      y1: pt1[<span class="number">1</span>],</span><br><span class="line">      x2: pt2[<span class="number">0</span>],</span><br><span class="line">      y2: pt2[<span class="number">1</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    style: zrUtil.extend(&#123;</span><br><span class="line">      lineCap: <span class="string">'round'</span></span><br><span class="line">    &#125;, axisModel.getModel(<span class="string">'axisLine.lineStyle'</span>).getLineStyle()),</span><br><span class="line">    strokeContainThreshold: opt.strokeContainThreshold || <span class="number">5</span>,</span><br><span class="line">    silent: <span class="literal">true</span>,</span><br><span class="line">    z2: <span class="number">1</span></span><br><span class="line">  &#125;)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是建造坐标轴线的函数，在我们这个例子中，x轴坐标轴线的位置是需要改变的。在这里面，pt1和pt2经过了变换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (matrix) &#123;</span><br><span class="line">      v2ApplyTransform(pt1, pt1, matrix);</span><br><span class="line">      v2ApplyTransform(pt2, pt2, matrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pt1从[0, 0]变成了[100, 643],pt2从[800, 0]变成了[900, 643]，这个matrix变量是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="number">642.8571166992188</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出matrix[4]和matrix[5]应该是和变换有关的。那么matrix1-4都有什么作用呢？也许是矩阵变换吧，目前暂时不知道。<br>Anyway，现在知道了，影响x轴画法的变量，是Echarts._componentsViews[0].__model.axis._extend和axisBuilder._transform, 其中axisBuilder是var axisBuilder = new AxisBuilder(axisModel, layout);弄出来的。</p><p>取到var grid = gridModel.coordinateSystem;，然后从grid中取到rect，这是画图区域的矩形，它有x起点有y起点，有width有height。</p><p>发现在helper.layout中，var axisPosition = axis.onZero ? ‘onZero’ : rawAxisPosition;是受axis.onZero影响的。尝试一下改axis.onZero会不会好点,也就是Echarts._componentsViews[5].__model.axis.onZero</p><p>改写gridProto.update方法就好了！！！！！！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">each(axesMap.x, <span class="function"><span class="keyword">function</span>(<span class="params">xAxis</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// onZero can not be enabled in these two situations</span></span><br><span class="line">  <span class="comment">// 1. When any other axis is a category axis</span></span><br><span class="line">  <span class="comment">// 2. When any other axis not across 0 point</span></span><br><span class="line">  <span class="keyword">if</span> (ifAxisCanNotOnZero(<span class="string">'y'</span>)) &#123;</span><br><span class="line">    xAxis.onZero = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>那么，怎么去改写呢<br>Echarts._componentsViews[0].__model.axis.scale<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品经理一个蛋疼的需求，着实让我研究了半天。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>阅读redux源码--combineReducer.js</title>
    <link href="http://yoursite.com/2018/04/10/%E9%98%85%E8%AF%BBredux%E6%BA%90%E7%A0%81-combineReducer-js/"/>
    <id>http://yoursite.com/2018/04/10/阅读redux源码-combineReducer-js/</id>
    <published>2018-04-10T06:08:26.000Z</published>
    <updated>2018-04-10T06:10:18.294Z</updated>
    
    <content type="html"><![CDATA[<p>combineReducer是redux的2大核心之一，它为reducer提供了code split的功能，避免我们的reducer文件变得太长。</p><a id="more"></a><hr><h2 id="combineReducer-js"><a href="#combineReducer-js" class="headerlink" title="combineReducer.js"></a>combineReducer.js</h2><p>combineReducer基本上是我们工程中最常用到的功能。</p><hr><p>源码的自然语言描述：<br>接收一个参数reducers。用Object.keys获取reducers的key，然后循环。在循环里，如果这个key的值是一个function，那么就把这个key赋给finalReducer。然后搞出一个finalReducerKeys。</p><p>然后是一个try语句，执行<code>assertReducerShape(finalReducers)</code>，如果有报错，把错误存到shapeAssertionError里面去。</p><p>最后返回一个函数combination，就是一个大的reducer，如果有shapeAssertionError，抛出错误；如果是在开发模式，调用getUnexpectedStateShapeWarningMessage来发警告（注意，不是错误，不会停止代码的运行）。<br>然后前置处理结束，开始真正的处理逻辑。设hasChanged为false，nextState为{}，对finalReducerKeys进行循环，对于每个key，获得reducer，然后取出previousStateForKey，然后使用reducer生成nextStateForKey，并且把nextStateForKey赋到nextState上面去。然后修改hasChanged的值。最后，如果hasChanged为true，返回nextState，否则返回state。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;combineReducer是redux的2大核心之一，它为reducer提供了code split的功能，避免我们的reducer文件变得太长。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>阅读redux源码--createStore.js</title>
    <link href="http://yoursite.com/2018/04/10/%E9%98%85%E8%AF%BBredux%E6%BA%90%E7%A0%81-createStore-js/"/>
    <id>http://yoursite.com/2018/04/10/阅读redux源码-createStore-js/</id>
    <published>2018-04-10T06:04:00.000Z</published>
    <updated>2018-04-10T06:06:57.495Z</updated>
    
    <content type="html"><![CDATA[<p>createStore是redux的2大核心之一，它创建了一个Redux store，并把state隐藏在闭包函数之中。</p><a id="more"></a><hr><h2 id="createStore-js"><a href="#createStore-js" class="headerlink" title="createStore.js"></a>createStore.js</h2><p>接收3个参数：reducer，preloadedState，enhancer，返回一个object，概念上是Redux store，有dispatch，subscribe，getState，replaceReducer</p><hr><p>首先是各种检查，保证代码能够顺利运行，比如：</p><ul><li>如果第二个参数preloadedState是function，并且第三个参数enhancer不存在的话，那么挪一下，把第二个参数的function赋给enhancer，然后把preloadedState置为undefined。这是为了函数能够接收断续的参数，而不必把不需要的参数填上undefined。</li><li>如果有enhancer，那么enhancer必须为function，并且return enhancer(createStore)(reducer, preloadedState)。这说明2件事：1.enhancer加强的是createStore。2.enhancer接收一个createStore函数，返回一个和createStore差不多的函数。</li><li>如果reducer不是function，报错.</li></ul><hr><p>然后声明一些变量：</p><ul><li><code>currentReducer</code>：入参reducer</li><li><code>currentState</code>：入参preloadedState</li><li><code>currentListeners</code>： 一个空数组</li><li><code>nextListeners</code>：currentListeners</li><li><code>isDispatching</code>： false</li></ul><hr><p>然后是function getState：如果不是isDispatching，返回currentState。</p><hr><p>然后是function subscribe，接受一个入参listener。listener必须为function，所以先判断报错。<br>置isSubscribed为true，并且保证currentListeners和nextListeners不是同一个引用，再往nextListeners里push(listener).<br>返回一个函数，这个函数执行后，能unsubscribe这个listener。<br><strong>一个有意思的地方是，数组的indexOf方法可以对函数使用。</strong> [].indexOf(listener)能够拿到listener在数组里的index。</p><p>然后是function subscribe，接受一个入参listener。subscribe就做了一件事情，就是把入参listener push到nextListeners里面，并且返回一个unsubscribe函数。</p><hr><p>然后是function dispatch，接受一个入参action，action必须是普通object，并且必须有type属性，并且当前不能是isDispatching。<br>接着，把isDispatching置为true，以currentState和action为参数，用currentReducer生成新的state，再更新到currentState。<br>然后把nextListeners赋给currentListeners，每个listener都执行一下。<br>最后把action返回来。</p><hr><p>然后是function replaceReducer，接收一个入参nextReducer，把currentReducer用nextReducer替换了，然后dispatch一个内置的action，只有type。这个dispatch会用nextReducer生成新的state，并且把currentListener都执行一遍。</p><hr><p>然后是function observable，没有入参，返回一个object。有2个属性，一个subscribe，一个$$observable。subscribe接收一个参数observer，它是个object，并且有next属性，用来对当前state进行处理。调用subscribe会执行一次observer方法，然后把observer用前面的subscribe方法注册到currentListener上面，这样在每次dispatch的时候，都会对currentState执行observer.next</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;createStore是redux的2大核心之一，它创建了一个Redux store，并把state隐藏在闭包函数之中。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>阅读redux源码--bindActionCreators.js</title>
    <link href="http://yoursite.com/2018/04/10/%E9%98%85%E8%AF%BBredux%E6%BA%90%E7%A0%81-bindActionCreators-js/"/>
    <id>http://yoursite.com/2018/04/10/阅读redux源码-bindActionCreators-js/</id>
    <published>2018-04-10T05:55:46.000Z</published>
    <updated>2018-04-10T06:02:13.794Z</updated>
    
    <content type="html"><![CDATA[<p>bindActionCreators是把action和dispatch绑定，这样本来2步走————创建action，然后dispatch————的代码，就变成了1步走————创建action之后马上dispatch。</p><a id="more"></a><hr><h2 id="bindActionCreators-js"><a href="#bindActionCreators-js" class="headerlink" title="bindActionCreators.js"></a>bindActionCreators.js</h2><p>接收2个参数：actionCreators和dispatch。actionCreators应该是个function或者一个object，dispatch应该是个function。</p><hr><p><strong>当actionCreators是个function时：</strong><br>bindActionCreators得到的结果是一个function，这个function把参数传给actionCreators之后，直接dispatch了。所以是把<strong>actionCreators</strong>升级成<strong>会直接dispatch的actionCreators</strong></p><hr><p><strong>当actionCreators是个object时：</strong><br>返回boundActionCreators，这是一个object。对actionCreators进行遍历，这时候问题转化成了<strong>当actionCreators是个function时</strong>，于是和上面一样的处理，把当前的actionCreator升级成会直接dispatch的actionCreator，然后赋给boundActionCreators。</p><hr><h2 id="总结一句话："><a href="#总结一句话：" class="headerlink" title="总结一句话："></a>总结一句话：</h2><p>之前的actionCreator创建了action之后，还要用dispatch来分发掉这个action，所以代码里可能会有非常多的dispatch。而bindActionCreators，就是把actionCreator和dispatch绑定在一起，升级成会直接dispatch的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bindActionCreators是把action和dispatch绑定，这样本来2步走————创建action，然后dispatch————的代码，就变成了1步走————创建action之后马上dispatch。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>阅读redux源码--applyMiddleware.js</title>
    <link href="http://yoursite.com/2018/04/10/%E9%98%85%E8%AF%BBredux%E6%BA%90%E7%A0%81-applyMiddleware-js/"/>
    <id>http://yoursite.com/2018/04/10/阅读redux源码-applyMiddleware-js/</id>
    <published>2018-04-10T05:49:07.000Z</published>
    <updated>2018-04-10T05:54:08.649Z</updated>
    
    <content type="html"><![CDATA[<p>applyMiddleware.js就是升级dispatch方法，使之更强大。</p><a id="more"></a><hr><h2 id="applyMiddleware-js"><a href="#applyMiddleware-js" class="headerlink" title="applyMiddleware.js"></a>applyMiddleware.js</h2><p>接收若干个函数，统称为<code>...middlewares</code>,返回一个函数a（代码里是匿名函数，我这里为了表达方便加个名字）。这个函数a接收参数createStore，返回一个Redux Store的对象。因为applyMiddleware.js是当作enhancer用在createStore里面的，所以返回的这个函数a，接收一个createStore为参数。</p><p>然后呢创建了一个<code>store</code>，声明一个dispatch函数，声明一个chain数组。创建middlewareAPI这个对象，它的getState就是store的getState，dispatch是一个函数。</p><p>然后遍历middlewares，对其中的每个middleware都用middlewareAPI执行一下，返回值都是接收一个参数的函数，返回值塞到chain里。举个简单的例子，比如<code>chain = [b, c, d]</code>。</p><p>然后用compose把chain和store.dispatch组合起来，变成一系列变换，再赋给新的dispatch：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch = b(c(d(store.dispatch)))</span><br></pre></td></tr></table></figure><p>最后返回一个redux store，这个store除了dispatch之外都是原装的，和createStore.js返回的一样。dispatch则是经过middlewares的一系列变换后生成的dispatch。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>applyMiddleware的目的就是<strong>加强dispatch</strong>，让dispatch在原有的功能上，进行函数变换使之具有新的功能。</p><p>它接收若干个middleware作为参数。每个middleware能够接收到一个object作为参数，这个参数有getState和新的dispatch；然后返回一个只接收单个参数的函数。这个函数是要被compose使用的。</p><p>然后使用compose制造一个新的dispatch，新的dispatch是按照middlewares从右往左的顺序执行的。</p><p>middleware接收一个object作为参数，返回一个函数，这个函数接收一个next作为参数，返回一个函数，这个函数接收一个action作为参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;applyMiddleware.js就是升级dispatch方法，使之更强大。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>现金找零方式的总数（sicp）</title>
    <link href="http://yoursite.com/2018/04/10/%E7%8E%B0%E9%87%91%E6%89%BE%E9%9B%B6%E6%96%B9%E5%BC%8F%E7%9A%84%E6%80%BB%E6%95%B0%EF%BC%88sicp%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/10/现金找零方式的总数（sicp）/</id>
    <published>2018-04-10T05:42:31.000Z</published>
    <updated>2018-04-10T05:48:09.668Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题：现有现金a，并且有n种面额的零钱，问，共有多少种找零方式。</strong><br>问题细化：现有现金1元，并且有50分，25分，10分，5分，1分五种面额，用这5种零钱组成1元，共有多少种方式？</p><a id="more"></a><hr><p>如果把n种零钱按照某种顺序排列（如50分，25分，10分，5分，1分，不一定升序或降序，也可以乱序），那么问题可以转化为：<br><strong>现金a用除第一种零钱之外其他面额的找零方式数目</strong><br>加上<br><strong>现金a-d用所有面额的找零方式数目，其中d为第一种零钱的面额</strong></p><p>为什么？什么逻辑？有点晕，看不懂？没关系接着往下看。</p><p>上面的逻辑等同于<br><strong>使用第一种零钱的次数为0次，现金a找零方式数目</strong><br>加上<br><strong>使用第一种零钱的次数为&gt;=1次，现金a找零方式数目</strong><br>如果减去1个第一种零钱，那么等价于<strong>“使用第一种零钱的次数为&gt;=0次，现金a-d找零方式数目”</strong>，亦即<strong>“现金a-d用所有面额的找零方式数目，其中d为第一种零钱的面额”</strong></p><hr><p>弄明白上面的逻辑，就看例子吧：以50分，25分，10分，5分，1分为序列，现金额度为1元，则找零方式总数<br>等于</p><blockquote><p>1元完全不用50分 + 50分用50，25，10，5，1分//现在第一种零钱为50分</p></blockquote><p>等于</p><blockquote><p>1元完全不用50分 + (50分完全不用50分 + 0分用50，25，10，5，1分)//现在第一种零钱为50分</p></blockquote><p>等于</p><blockquote><p>1元用25，10，5，1分 + 50分用25，10，5，1分<br>//“完全不用50分”等价于”用25，10，5，1分”，“0分用50，25，10，5，1分”是0</p></blockquote><p>等于</p><blockquote><p>(1元完全不用25分 + 75分用25，10，5，1分)// 现在硬币总数只有4种,第一种是25分<br>+<br>(50分完全不用25分 + 25分用25，10，5，1分)// 现在硬币总数只有4种,第一种是25分</p></blockquote><p>等于</p><blockquote><p>(1元完全不用25分 + (75分完全不用25分 + 50分用25，10，5，1分))// 现在硬币总数只有4种,第一种是25分<br>+<br>(50分完全不用25分 + (25分完全不用25分 + 0分用25，10，5，1分))// 现在硬币总数只有4种,第一种是25分</p></blockquote><p>。。。。一直循环下去</p><hr><p>代码实现（js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> kindsOfCoins = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果amount正好为0</span></span><br><span class="line"><span class="comment"> * 现金amount，用kinds种硬币的找零方式总数，</span></span><br><span class="line"><span class="comment"> * 等于现金amount，用除了第一种硬币之外其他硬币的找零方式总数 + 现金amount - d用所有硬币的找零方式总数（d为第一种硬币的面值）</span></span><br><span class="line"><span class="comment"> * amount为0，说明前一步amount-firstCoins正好为0，比如25-25，是1种找零方式，return 1</span></span><br><span class="line"><span class="comment"> * amount&lt;0，说明前一步amount-firstCoins类似于10-25，不是找零方式，return 0</span></span><br><span class="line"><span class="comment"> * kinds===0，说明没有找零的硬币了，return 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param amount 总金额</span></span><br><span class="line"><span class="comment"> * @param kinds  硬币种类数</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countChange</span>(<span class="params">amount, kinds</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> restKindsOfCoins = kindsOfCoins.slice(<span class="number">0</span>, kinds);</span><br><span class="line">    <span class="keyword">const</span> firstCoins = restKindsOfCoins[kinds - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (amount === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (amount &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (kinds === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> countChange(amount, kinds - <span class="number">1</span>) + countChange(amount - firstCoins, kinds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countChange(<span class="number">100</span>, <span class="number">5</span>));<span class="comment">// 292</span></span><br></pre></td></tr></table></figure><p>注意，如果<code>const kindsOfCoins = [1, 5, 10, 25, 50];</code>改为<code>const kindsOfCoins = [50, 10, 5, 1, 25];</code>得出的结果是一样的，也就是说零钱的随便怎么排序都可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题：现有现金a，并且有n种面额的零钱，问，共有多少种找零方式。&lt;/strong&gt;&lt;br&gt;问题细化：现有现金1元，并且有50分，25分，10分，5分，1分五种面额，用这5种零钱组成1元，共有多少种方式？&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="sicp" scheme="http://yoursite.com/tags/sicp/"/>
    
  </entry>
  
  <entry>
    <title>阅读redux源码--compose.js</title>
    <link href="http://yoursite.com/2018/04/09/%E9%98%85%E8%AF%BBredux%E6%BA%90%E7%A0%81-compose-js/"/>
    <id>http://yoursite.com/2018/04/09/阅读redux源码-compose-js/</id>
    <published>2018-04-09T08:52:16.000Z</published>
    <updated>2018-04-10T02:56:34.004Z</updated>
    
    <content type="html"><![CDATA[<p>compose.js是redux里强大而又常被忽视的一个功能。</p><a id="more"></a><hr><h2 id="compose-js"><a href="#compose-js" class="headerlink" title="compose.js"></a>compose.js</h2><p>compose.js的源码相当简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.参数里面的…funcs起到了什么作用。</strong><br><strong>2.整个compose起到了什么作用。</strong></p><hr><p>…funcs起到的作用，就相当于把arguments转化为了一个数组。<br>但是细节可能有些不一样。我本来以为相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 但是实际上是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([...arguments]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个点<code>...</code>的语法，叫做<code>扩展语法</code>, 而<code>扩展语法</code>在函数中的应用，叫<code>剩余参数</code>。关于这点可以去看mdn的[扩展语法-mdn][1],这里不做过多展开。</p><hr><p><strong>关于compose做了什么，用中文解读一下源码好了。</strong><br>如果没有参数，返回一个函数，它接受什么就直接返回什么，不做任何处理。<br>如果有1个参数，那么返回这一个参数（这个参数应该是个函数）。<br>如果有2个以上的参数，那么对这些参数进行reduce操作，最后会返回一个函数，这个函数接收若干参数，并且执行最右边的函数，然后再用返回值执行之前组合好的函数。</p><p>举个例子吧，假设给<code>compose</code>传入的参数是<code>a,b,c</code>三个函数，那么<code>...funcs</code>就是<code>[a, b, c]</code>.我们用<code>cp</code>来表示之前的组合函数。<br>这样一来，执行了<code>compose</code>后，返回的函数是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(...args) =&gt; cp1(c(...args))</span><br></pre></td></tr></table></figure><p>而cp1则是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(...args) =&gt; cp2(b(...args))</span><br></pre></td></tr></table></figure><p>而cp2则是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(...args) =&gt; a(...args)</span><br></pre></td></tr></table></figure></p><p>所以把cp2代入上面，再把cp1代入上上面就得到：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(...args) =&gt; a(b(c(...args)))</span><br></pre></td></tr></table></figure></p><hr><p>所以我们理解了，compose函数，其实是一个非常常用的抽象。它把传入其中的函数，按照从右到左的顺序按序执行，除了最右边的可以接收多个参数，剩下的函数都只能接收单个参数。<strong>也就是说compose把参数转化成一个连续的函数变换。</strong></p><p>只是感觉执行顺序有待商榷，我觉得compose从左到右的顺序可能会好些，毕竟先写的函数先执行，逻辑上可能较为通顺点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> funcs.reverse().reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br></pre></td></tr></table></figure></p><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>一个典型的应用场景是用echarts.js绘制图表。<br>比如我们经常会抽象出一个函数来生成echarts的option：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> stackLine = (&#123;</span><br><span class="line">  dataset,</span><br><span class="line">  title,</span><br><span class="line">  yAxisName,</span><br><span class="line">  stackName,</span><br><span class="line">  xAxisData</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> option = &#123;</span><br><span class="line">    ...someOptionHere</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> option;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是写完后又会发现，这个图表的样式和那个有一点差异，怎么办呢？再写一个函数，然后把函数内把某些设置改一改？这样做的话，重复的代码太多，并且某些改动的通用型太低，对于颜色的改动，一个饼图和一个折线图可能要写2份代码。</p><p>一个较好的解决方法是，构造几个函数，它们接收一个option为参数，最后返回一个新的option。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改颜色</span></span><br><span class="line"><span class="keyword">const</span> changeColor = <span class="function"><span class="params">option</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123; ...option &#125;;</span><br><span class="line">    opt.color = [<span class="string">'#000'</span>, <span class="string">'#fff'</span>];</span><br><span class="line">    <span class="keyword">return</span> opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改y轴样式</span></span><br><span class="line"><span class="keyword">const</span> changeYAxisStyle = <span class="function"><span class="params">option</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123; ...option &#125;;</span><br><span class="line">    opt.yAxis.labelStyle = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再修改label的啥啥啥</span></span><br><span class="line"><span class="keyword">const</span> changeLabel = <span class="function"><span class="params">option</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123; ...option &#125;;</span><br><span class="line">    opt.label.something = foo;</span><br><span class="line">    <span class="keyword">return</span> opt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是使用compose加上之前的stackLine，我们可以拿出一个按需修改的版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myStackLine = compose(changeColor, changeYAxisStyle, changeLabel ,stackLine)</span><br></pre></td></tr></table></figure><p>这样代码的灵活度也很高，哪个修改不需要，直接删掉，或者需要加上哪个修改，直接往上加。另外对于折线图的修改，饼图也能适用，真是非常不错。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不读源码不知道，原来隐藏着这么一个强大而被忽略掉的地方。另外react的组件其实也是一个object，那么其实也适用这种组合变换的模式。<br>  [1]: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax#%E8%AF%AD%E6%B3%95</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;compose.js是redux里强大而又常被忽视的一个功能。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
